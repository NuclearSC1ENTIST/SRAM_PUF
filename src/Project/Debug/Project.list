
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032b4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080033f0  080033f0  000133f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034b4  080034b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080034b4  080034b4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034b4  080034b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034b4  080034b4  000134b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034b8  080034b8  000134b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  0800352c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  0800352c  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d08  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017e9  00000000  00000000  00027da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c0  00000000  00000000  00029590  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006f8  00000000  00000000  00029d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014f30  00000000  00000000  0002a448  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000065ec  00000000  00000000  0003f378  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008024f  00000000  00000000  00045964  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c5bb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000261c  00000000  00000000  000c5c30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	080033d8 	.word	0x080033d8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	080033d8 	.word	0x080033d8

0800017c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000182:	2300      	movs	r3, #0
 8000184:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000186:	2003      	movs	r0, #3
 8000188:	f000 fbc8 	bl	800091c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800018c:	2000      	movs	r0, #0
 800018e:	f000 f80d 	bl	80001ac <HAL_InitTick>
 8000192:	4603      	mov	r3, r0
 8000194:	2b00      	cmp	r3, #0
 8000196:	d002      	beq.n	800019e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000198:	2301      	movs	r3, #1
 800019a:	71fb      	strb	r3, [r7, #7]
 800019c:	e001      	b.n	80001a2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800019e:	f001 fff3 	bl	8002188 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001a2:	79fb      	ldrb	r3, [r7, #7]
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	3708      	adds	r7, #8
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}

080001ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80001b4:	2300      	movs	r3, #0
 80001b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80001b8:	4b16      	ldr	r3, [pc, #88]	; (8000214 <HAL_InitTick+0x68>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d022      	beq.n	8000206 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80001c0:	4b15      	ldr	r3, [pc, #84]	; (8000218 <HAL_InitTick+0x6c>)
 80001c2:	681a      	ldr	r2, [r3, #0]
 80001c4:	4b13      	ldr	r3, [pc, #76]	; (8000214 <HAL_InitTick+0x68>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80001d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80001d4:	4618      	mov	r0, r3
 80001d6:	f000 fbd6 	bl	8000986 <HAL_SYSTICK_Config>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d10f      	bne.n	8000200 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b0f      	cmp	r3, #15
 80001e4:	d809      	bhi.n	80001fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001e6:	2200      	movs	r2, #0
 80001e8:	6879      	ldr	r1, [r7, #4]
 80001ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001ee:	f000 fba0 	bl	8000932 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80001f2:	4a0a      	ldr	r2, [pc, #40]	; (800021c <HAL_InitTick+0x70>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	6013      	str	r3, [r2, #0]
 80001f8:	e007      	b.n	800020a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80001fa:	2301      	movs	r3, #1
 80001fc:	73fb      	strb	r3, [r7, #15]
 80001fe:	e004      	b.n	800020a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000200:	2301      	movs	r3, #1
 8000202:	73fb      	strb	r3, [r7, #15]
 8000204:	e001      	b.n	800020a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000206:	2301      	movs	r3, #1
 8000208:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800020a:	7bfb      	ldrb	r3, [r7, #15]
}
 800020c:	4618      	mov	r0, r3
 800020e:	3710      	adds	r7, #16
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000004 	.word	0x20000004
 8000218:	20000008 	.word	0x20000008
 800021c:	20000000 	.word	0x20000000

08000220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <HAL_IncTick+0x1c>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b05      	ldr	r3, [pc, #20]	; (8000240 <HAL_IncTick+0x20>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4413      	add	r3, r2
 800022e:	4a03      	ldr	r2, [pc, #12]	; (800023c <HAL_IncTick+0x1c>)
 8000230:	6013      	str	r3, [r2, #0]
}
 8000232:	bf00      	nop
 8000234:	46bd      	mov	sp, r7
 8000236:	bc80      	pop	{r7}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	2000009c 	.word	0x2000009c
 8000240:	20000004 	.word	0x20000004

08000244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  return uwTick;
 8000248:	4b02      	ldr	r3, [pc, #8]	; (8000254 <HAL_GetTick+0x10>)
 800024a:	681b      	ldr	r3, [r3, #0]
}
 800024c:	4618      	mov	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	2000009c 	.word	0x2000009c

08000258 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b08e      	sub	sp, #56	; 0x38
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000260:	2300      	movs	r3, #0
 8000262:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000266:	2300      	movs	r3, #0
 8000268:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800026a:	2300      	movs	r3, #0
 800026c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d101      	bne.n	8000278 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000274:	2301      	movs	r3, #1
 8000276:	e127      	b.n	80004c8 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	691b      	ldr	r3, [r3, #16]
 800027c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000282:	2b00      	cmp	r3, #0
 8000284:	d115      	bne.n	80002b2 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2200      	movs	r2, #0
 800028a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2200      	movs	r2, #0
 8000290:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000294:	4b8e      	ldr	r3, [pc, #568]	; (80004d0 <HAL_ADC_Init+0x278>)
 8000296:	6a1b      	ldr	r3, [r3, #32]
 8000298:	4a8d      	ldr	r2, [pc, #564]	; (80004d0 <HAL_ADC_Init+0x278>)
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	6213      	str	r3, [r2, #32]
 80002a0:	4b8b      	ldr	r3, [pc, #556]	; (80004d0 <HAL_ADC_Init+0x278>)
 80002a2:	6a1b      	ldr	r3, [r3, #32]
 80002a4:	f003 0301 	and.w	r3, r3, #1
 80002a8:	60bb      	str	r3, [r7, #8]
 80002aa:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002ac:	6878      	ldr	r0, [r7, #4]
 80002ae:	f001 ff99 	bl	80021e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002b6:	f003 0310 	and.w	r3, r3, #16
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 80ff 	bne.w	80004be <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002c8:	f023 0302 	bic.w	r3, r3, #2
 80002cc:	f043 0202 	orr.w	r2, r3, #2
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80002d4:	4b7f      	ldr	r3, [pc, #508]	; (80004d4 <HAL_ADC_Init+0x27c>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	497c      	ldr	r1, [pc, #496]	; (80004d4 <HAL_ADC_Init+0x27c>)
 80002e2:	4313      	orrs	r3, r2
 80002e4:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80002ee:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80002f6:	4619      	mov	r1, r3
 80002f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002fc:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002fe:	6a3b      	ldr	r3, [r7, #32]
 8000300:	fa93 f3a3 	rbit	r3, r3
 8000304:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000306:	69fb      	ldr	r3, [r7, #28]
 8000308:	fab3 f383 	clz	r3, r3
 800030c:	b2db      	uxtb	r3, r3
 800030e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000312:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000318:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000320:	4619      	mov	r1, r3
 8000322:	2302      	movs	r3, #2
 8000324:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000328:	fa93 f3a3 	rbit	r3, r3
 800032c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800032e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000330:	fab3 f383 	clz	r3, r3
 8000334:	b2db      	uxtb	r3, r3
 8000336:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800033a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800033c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800033e:	4313      	orrs	r3, r2
 8000340:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	2b10      	cmp	r3, #16
 8000348:	d007      	beq.n	800035a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000352:	4313      	orrs	r3, r2
 8000354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000356:	4313      	orrs	r3, r2
 8000358:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000364:	2b40      	cmp	r3, #64	; 0x40
 8000366:	d04f      	beq.n	8000408 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800036e:	4313      	orrs	r3, r2
 8000370:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800037a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	6912      	ldr	r2, [r2, #16]
 8000380:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000384:	d003      	beq.n	800038e <HAL_ADC_Init+0x136>
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	6912      	ldr	r2, [r2, #16]
 800038a:	2a01      	cmp	r2, #1
 800038c:	d102      	bne.n	8000394 <HAL_ADC_Init+0x13c>
 800038e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000392:	e000      	b.n	8000396 <HAL_ADC_Init+0x13e>
 8000394:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000396:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800039a:	4313      	orrs	r3, r2
 800039c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d125      	bne.n	80003f4 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d114      	bne.n	80003dc <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b6:	3b01      	subs	r3, #1
 80003b8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80003bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003be:	69ba      	ldr	r2, [r7, #24]
 80003c0:	fa92 f2a2 	rbit	r2, r2
 80003c4:	617a      	str	r2, [r7, #20]
  return result;
 80003c6:	697a      	ldr	r2, [r7, #20]
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	b2d2      	uxtb	r2, r2
 80003ce:	4093      	lsls	r3, r2
 80003d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80003d6:	4313      	orrs	r3, r2
 80003d8:	633b      	str	r3, [r7, #48]	; 0x30
 80003da:	e00b      	b.n	80003f4 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e0:	f043 0220 	orr.w	r2, r3, #32
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80003ec:	f043 0201 	orr.w	r2, r3, #1
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	685a      	ldr	r2, [r3, #4]
 80003fa:	4b37      	ldr	r3, [pc, #220]	; (80004d8 <HAL_ADC_Init+0x280>)
 80003fc:	4013      	ands	r3, r2
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	6812      	ldr	r2, [r2, #0]
 8000402:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000404:	430b      	orrs	r3, r1
 8000406:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	689a      	ldr	r2, [r3, #8]
 800040e:	4b33      	ldr	r3, [pc, #204]	; (80004dc <HAL_ADC_Init+0x284>)
 8000410:	4013      	ands	r3, r2
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	6812      	ldr	r2, [r2, #0]
 8000416:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000418:	430b      	orrs	r3, r1
 800041a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	691b      	ldr	r3, [r3, #16]
 8000420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000424:	d003      	beq.n	800042e <HAL_ADC_Init+0x1d6>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	691b      	ldr	r3, [r3, #16]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d119      	bne.n	8000462 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000434:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800043c:	3b01      	subs	r3, #1
 800043e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8000442:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000444:	693a      	ldr	r2, [r7, #16]
 8000446:	fa92 f2a2 	rbit	r2, r2
 800044a:	60fa      	str	r2, [r7, #12]
  return result;
 800044c:	68fa      	ldr	r2, [r7, #12]
 800044e:	fab2 f282 	clz	r2, r2
 8000452:	b2d2      	uxtb	r2, r2
 8000454:	fa03 f202 	lsl.w	r2, r3, r2
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	430a      	orrs	r2, r1
 800045e:	631a      	str	r2, [r3, #48]	; 0x30
 8000460:	e007      	b.n	8000472 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000470:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	689a      	ldr	r2, [r3, #8]
 8000478:	4b19      	ldr	r3, [pc, #100]	; (80004e0 <HAL_ADC_Init+0x288>)
 800047a:	4013      	ands	r3, r2
 800047c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800047e:	429a      	cmp	r2, r3
 8000480:	d10b      	bne.n	800049a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	2200      	movs	r2, #0
 8000486:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048c:	f023 0303 	bic.w	r3, r3, #3
 8000490:	f043 0201 	orr.w	r2, r3, #1
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	64da      	str	r2, [r3, #76]	; 0x4c
 8000498:	e014      	b.n	80004c4 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049e:	f023 0312 	bic.w	r3, r3, #18
 80004a2:	f043 0210 	orr.w	r2, r3, #16
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80004ae:	f043 0201 	orr.w	r2, r3, #1
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80004b6:	2301      	movs	r3, #1
 80004b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80004bc:	e002      	b.n	80004c4 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80004be:	2301      	movs	r3, #1
 80004c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80004c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3738      	adds	r7, #56	; 0x38
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40023800 	.word	0x40023800
 80004d4:	40012700 	.word	0x40012700
 80004d8:	fcfc16ff 	.word	0xfcfc16ff
 80004dc:	c0fff18d 	.word	0xc0fff18d
 80004e0:	bf80fffe 	.word	0xbf80fffe

080004e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80004ee:	2300      	movs	r3, #0
 80004f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d101      	bne.n	8000504 <HAL_ADC_ConfigChannel+0x20>
 8000500:	2302      	movs	r3, #2
 8000502:	e134      	b.n	800076e <HAL_ADC_ConfigChannel+0x28a>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2201      	movs	r2, #1
 8000508:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	2b06      	cmp	r3, #6
 8000512:	d81c      	bhi.n	800054e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	685a      	ldr	r2, [r3, #4]
 800051e:	4613      	mov	r3, r2
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	4413      	add	r3, r2
 8000524:	3b05      	subs	r3, #5
 8000526:	221f      	movs	r2, #31
 8000528:	fa02 f303 	lsl.w	r3, r2, r3
 800052c:	43db      	mvns	r3, r3
 800052e:	4019      	ands	r1, r3
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	6818      	ldr	r0, [r3, #0]
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	685a      	ldr	r2, [r3, #4]
 8000538:	4613      	mov	r3, r2
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	4413      	add	r3, r2
 800053e:	3b05      	subs	r3, #5
 8000540:	fa00 f203 	lsl.w	r2, r0, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	430a      	orrs	r2, r1
 800054a:	641a      	str	r2, [r3, #64]	; 0x40
 800054c:	e07e      	b.n	800064c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	2b0c      	cmp	r3, #12
 8000554:	d81c      	bhi.n	8000590 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	685a      	ldr	r2, [r3, #4]
 8000560:	4613      	mov	r3, r2
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	4413      	add	r3, r2
 8000566:	3b23      	subs	r3, #35	; 0x23
 8000568:	221f      	movs	r2, #31
 800056a:	fa02 f303 	lsl.w	r3, r2, r3
 800056e:	43db      	mvns	r3, r3
 8000570:	4019      	ands	r1, r3
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	6818      	ldr	r0, [r3, #0]
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	685a      	ldr	r2, [r3, #4]
 800057a:	4613      	mov	r3, r2
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	4413      	add	r3, r2
 8000580:	3b23      	subs	r3, #35	; 0x23
 8000582:	fa00 f203 	lsl.w	r2, r0, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	430a      	orrs	r2, r1
 800058c:	63da      	str	r2, [r3, #60]	; 0x3c
 800058e:	e05d      	b.n	800064c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	2b12      	cmp	r3, #18
 8000596:	d81c      	bhi.n	80005d2 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	685a      	ldr	r2, [r3, #4]
 80005a2:	4613      	mov	r3, r2
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	4413      	add	r3, r2
 80005a8:	3b41      	subs	r3, #65	; 0x41
 80005aa:	221f      	movs	r2, #31
 80005ac:	fa02 f303 	lsl.w	r3, r2, r3
 80005b0:	43db      	mvns	r3, r3
 80005b2:	4019      	ands	r1, r3
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	6818      	ldr	r0, [r3, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	685a      	ldr	r2, [r3, #4]
 80005bc:	4613      	mov	r3, r2
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	4413      	add	r3, r2
 80005c2:	3b41      	subs	r3, #65	; 0x41
 80005c4:	fa00 f203 	lsl.w	r2, r0, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	430a      	orrs	r2, r1
 80005ce:	639a      	str	r2, [r3, #56]	; 0x38
 80005d0:	e03c      	b.n	800064c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	2b18      	cmp	r3, #24
 80005d8:	d81c      	bhi.n	8000614 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	685a      	ldr	r2, [r3, #4]
 80005e4:	4613      	mov	r3, r2
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	4413      	add	r3, r2
 80005ea:	3b5f      	subs	r3, #95	; 0x5f
 80005ec:	221f      	movs	r2, #31
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	43db      	mvns	r3, r3
 80005f4:	4019      	ands	r1, r3
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	6818      	ldr	r0, [r3, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	685a      	ldr	r2, [r3, #4]
 80005fe:	4613      	mov	r3, r2
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	3b5f      	subs	r3, #95	; 0x5f
 8000606:	fa00 f203 	lsl.w	r2, r0, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	430a      	orrs	r2, r1
 8000610:	635a      	str	r2, [r3, #52]	; 0x34
 8000612:	e01b      	b.n	800064c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	685a      	ldr	r2, [r3, #4]
 800061e:	4613      	mov	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	4413      	add	r3, r2
 8000624:	3b7d      	subs	r3, #125	; 0x7d
 8000626:	221f      	movs	r2, #31
 8000628:	fa02 f303 	lsl.w	r3, r2, r3
 800062c:	43db      	mvns	r3, r3
 800062e:	4019      	ands	r1, r3
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	6818      	ldr	r0, [r3, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	685a      	ldr	r2, [r3, #4]
 8000638:	4613      	mov	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	4413      	add	r3, r2
 800063e:	3b7d      	subs	r3, #125	; 0x7d
 8000640:	fa00 f203 	lsl.w	r2, r0, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	430a      	orrs	r2, r1
 800064a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b09      	cmp	r3, #9
 8000652:	d81a      	bhi.n	800068a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	6959      	ldr	r1, [r3, #20]
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	4613      	mov	r3, r2
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	4413      	add	r3, r2
 8000664:	2207      	movs	r2, #7
 8000666:	fa02 f303 	lsl.w	r3, r2, r3
 800066a:	43db      	mvns	r3, r3
 800066c:	4019      	ands	r1, r3
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	6898      	ldr	r0, [r3, #8]
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	4613      	mov	r3, r2
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	4413      	add	r3, r2
 800067c:	fa00 f203 	lsl.w	r2, r0, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	430a      	orrs	r2, r1
 8000686:	615a      	str	r2, [r3, #20]
 8000688:	e042      	b.n	8000710 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b13      	cmp	r3, #19
 8000690:	d81c      	bhi.n	80006cc <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	6919      	ldr	r1, [r3, #16]
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4613      	mov	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	4413      	add	r3, r2
 80006a2:	3b1e      	subs	r3, #30
 80006a4:	2207      	movs	r2, #7
 80006a6:	fa02 f303 	lsl.w	r3, r2, r3
 80006aa:	43db      	mvns	r3, r3
 80006ac:	4019      	ands	r1, r3
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	6898      	ldr	r0, [r3, #8]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4613      	mov	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	4413      	add	r3, r2
 80006bc:	3b1e      	subs	r3, #30
 80006be:	fa00 f203 	lsl.w	r2, r0, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	430a      	orrs	r2, r1
 80006c8:	611a      	str	r2, [r3, #16]
 80006ca:	e021      	b.n	8000710 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b1a      	cmp	r3, #26
 80006d2:	d81c      	bhi.n	800070e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	68d9      	ldr	r1, [r3, #12]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4613      	mov	r3, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4413      	add	r3, r2
 80006e4:	3b3c      	subs	r3, #60	; 0x3c
 80006e6:	2207      	movs	r2, #7
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	43db      	mvns	r3, r3
 80006ee:	4019      	ands	r1, r3
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	6898      	ldr	r0, [r3, #8]
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4613      	mov	r3, r2
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	4413      	add	r3, r2
 80006fe:	3b3c      	subs	r3, #60	; 0x3c
 8000700:	fa00 f203 	lsl.w	r2, r0, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	430a      	orrs	r2, r1
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	e000      	b.n	8000710 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800070e:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b10      	cmp	r3, #16
 8000716:	d003      	beq.n	8000720 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800071c:	2b11      	cmp	r3, #17
 800071e:	d121      	bne.n	8000764 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <HAL_ADC_ConfigChannel+0x294>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000728:	2b00      	cmp	r3, #0
 800072a:	d11b      	bne.n	8000764 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_ADC_ConfigChannel+0x294>)
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	4a11      	ldr	r2, [pc, #68]	; (8000778 <HAL_ADC_ConfigChannel+0x294>)
 8000732:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000736:	6053      	str	r3, [r2, #4]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b10      	cmp	r3, #16
 800073e:	d111      	bne.n	8000764 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <HAL_ADC_ConfigChannel+0x298>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <HAL_ADC_ConfigChannel+0x29c>)
 8000746:	fba2 2303 	umull	r2, r3, r2, r3
 800074a:	0c9a      	lsrs	r2, r3, #18
 800074c:	4613      	mov	r3, r2
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	4413      	add	r3, r2
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8000756:	e002      	b.n	800075e <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	3b01      	subs	r3, #1
 800075c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d1f9      	bne.n	8000758 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800076c:	7bfb      	ldrb	r3, [r7, #15]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	40012700 	.word	0x40012700
 800077c:	20000008 	.word	0x20000008
 8000780:	431bde83 	.word	0x431bde83

08000784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800079a:	68ba      	ldr	r2, [r7, #8]
 800079c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007a0:	4013      	ands	r3, r2
 80007a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007b6:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <__NVIC_SetPriorityGrouping+0x44>)
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	60d3      	str	r3, [r2, #12]
}
 80007bc:	bf00      	nop
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d0:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <__NVIC_GetPriorityGrouping+0x18>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	f003 0307 	and.w	r3, r3, #7
}
 80007da:	4618      	mov	r0, r3
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	db0b      	blt.n	8000812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	f003 021f 	and.w	r2, r3, #31
 8000800:	4906      	ldr	r1, [pc, #24]	; (800081c <__NVIC_EnableIRQ+0x34>)
 8000802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000806:	095b      	lsrs	r3, r3, #5
 8000808:	2001      	movs	r0, #1
 800080a:	fa00 f202 	lsl.w	r2, r0, r2
 800080e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	e000e100 	.word	0xe000e100

08000820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	6039      	str	r1, [r7, #0]
 800082a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800082c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000830:	2b00      	cmp	r3, #0
 8000832:	db0a      	blt.n	800084a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	b2da      	uxtb	r2, r3
 8000838:	490c      	ldr	r1, [pc, #48]	; (800086c <__NVIC_SetPriority+0x4c>)
 800083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083e:	0112      	lsls	r2, r2, #4
 8000840:	b2d2      	uxtb	r2, r2
 8000842:	440b      	add	r3, r1
 8000844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000848:	e00a      	b.n	8000860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4908      	ldr	r1, [pc, #32]	; (8000870 <__NVIC_SetPriority+0x50>)
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	f003 030f 	and.w	r3, r3, #15
 8000856:	3b04      	subs	r3, #4
 8000858:	0112      	lsls	r2, r2, #4
 800085a:	b2d2      	uxtb	r2, r2
 800085c:	440b      	add	r3, r1
 800085e:	761a      	strb	r2, [r3, #24]
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000e100 	.word	0xe000e100
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000874:	b480      	push	{r7}
 8000876:	b089      	sub	sp, #36	; 0x24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	f1c3 0307 	rsb	r3, r3, #7
 800088e:	2b04      	cmp	r3, #4
 8000890:	bf28      	it	cs
 8000892:	2304      	movcs	r3, #4
 8000894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	3304      	adds	r3, #4
 800089a:	2b06      	cmp	r3, #6
 800089c:	d902      	bls.n	80008a4 <NVIC_EncodePriority+0x30>
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	3b03      	subs	r3, #3
 80008a2:	e000      	b.n	80008a6 <NVIC_EncodePriority+0x32>
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43da      	mvns	r2, r3
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	401a      	ands	r2, r3
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	fa01 f303 	lsl.w	r3, r1, r3
 80008c6:	43d9      	mvns	r1, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008cc:	4313      	orrs	r3, r2
         );
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3724      	adds	r7, #36	; 0x24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr

080008d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008e8:	d301      	bcc.n	80008ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ea:	2301      	movs	r3, #1
 80008ec:	e00f      	b.n	800090e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ee:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <SysTick_Config+0x40>)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008f6:	210f      	movs	r1, #15
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008fc:	f7ff ff90 	bl	8000820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <SysTick_Config+0x40>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000906:	4b04      	ldr	r3, [pc, #16]	; (8000918 <SysTick_Config+0x40>)
 8000908:	2207      	movs	r2, #7
 800090a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	e000e010 	.word	0xe000e010

0800091c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff ff2d 	bl	8000784 <__NVIC_SetPriorityGrouping>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b086      	sub	sp, #24
 8000936:	af00      	add	r7, sp, #0
 8000938:	4603      	mov	r3, r0
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
 800093e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000944:	f7ff ff42 	bl	80007cc <__NVIC_GetPriorityGrouping>
 8000948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	68b9      	ldr	r1, [r7, #8]
 800094e:	6978      	ldr	r0, [r7, #20]
 8000950:	f7ff ff90 	bl	8000874 <NVIC_EncodePriority>
 8000954:	4602      	mov	r2, r0
 8000956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800095a:	4611      	mov	r1, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff ff5f 	bl	8000820 <__NVIC_SetPriority>
}
 8000962:	bf00      	nop
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff35 	bl	80007e8 <__NVIC_EnableIRQ>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff ffa2 	bl	80008d8 <SysTick_Config>
 8000994:	4603      	mov	r3, r0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80009a0:	b480      	push	{r7}
 80009a2:	b087      	sub	sp, #28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80009b6:	e154      	b.n	8000c62 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	2101      	movs	r1, #1
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	4013      	ands	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f000 8146 	beq.w	8000c5c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d003      	beq.n	80009e0 <HAL_GPIO_Init+0x40>
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	2b12      	cmp	r3, #18
 80009de:	d123      	bne.n	8000a28 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	08da      	lsrs	r2, r3, #3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3208      	adds	r2, #8
 80009e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	f003 0307 	and.w	r3, r3, #7
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	220f      	movs	r2, #15
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	43db      	mvns	r3, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	691a      	ldr	r2, [r3, #16]
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	08da      	lsrs	r2, r3, #3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	3208      	adds	r2, #8
 8000a22:	6939      	ldr	r1, [r7, #16]
 8000a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	2203      	movs	r2, #3
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f003 0203 	and.w	r2, r3, #3
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d00b      	beq.n	8000a7c <HAL_GPIO_Init+0xdc>
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d007      	beq.n	8000a7c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a70:	2b11      	cmp	r3, #17
 8000a72:	d003      	beq.n	8000a7c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	2b12      	cmp	r3, #18
 8000a7a:	d130      	bne.n	8000ade <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	2203      	movs	r2, #3
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	68da      	ldr	r2, [r3, #12]
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	091b      	lsrs	r3, r3, #4
 8000ac8:	f003 0201 	and.w	r2, r3, #1
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	2203      	movs	r2, #3
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f000 80a0 	beq.w	8000c5c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1c:	4b57      	ldr	r3, [pc, #348]	; (8000c7c <HAL_GPIO_Init+0x2dc>)
 8000b1e:	6a1b      	ldr	r3, [r3, #32]
 8000b20:	4a56      	ldr	r2, [pc, #344]	; (8000c7c <HAL_GPIO_Init+0x2dc>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6213      	str	r3, [r2, #32]
 8000b28:	4b54      	ldr	r3, [pc, #336]	; (8000c7c <HAL_GPIO_Init+0x2dc>)
 8000b2a:	6a1b      	ldr	r3, [r3, #32]
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000b34:	4a52      	ldr	r2, [pc, #328]	; (8000c80 <HAL_GPIO_Init+0x2e0>)
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	089b      	lsrs	r3, r3, #2
 8000b3a:	3302      	adds	r3, #2
 8000b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	f003 0303 	and.w	r3, r3, #3
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	220f      	movs	r2, #15
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a4a      	ldr	r2, [pc, #296]	; (8000c84 <HAL_GPIO_Init+0x2e4>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d019      	beq.n	8000b94 <HAL_GPIO_Init+0x1f4>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a49      	ldr	r2, [pc, #292]	; (8000c88 <HAL_GPIO_Init+0x2e8>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d013      	beq.n	8000b90 <HAL_GPIO_Init+0x1f0>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a48      	ldr	r2, [pc, #288]	; (8000c8c <HAL_GPIO_Init+0x2ec>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d00d      	beq.n	8000b8c <HAL_GPIO_Init+0x1ec>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a47      	ldr	r2, [pc, #284]	; (8000c90 <HAL_GPIO_Init+0x2f0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d007      	beq.n	8000b88 <HAL_GPIO_Init+0x1e8>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a46      	ldr	r2, [pc, #280]	; (8000c94 <HAL_GPIO_Init+0x2f4>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d101      	bne.n	8000b84 <HAL_GPIO_Init+0x1e4>
 8000b80:	2304      	movs	r3, #4
 8000b82:	e008      	b.n	8000b96 <HAL_GPIO_Init+0x1f6>
 8000b84:	2305      	movs	r3, #5
 8000b86:	e006      	b.n	8000b96 <HAL_GPIO_Init+0x1f6>
 8000b88:	2303      	movs	r3, #3
 8000b8a:	e004      	b.n	8000b96 <HAL_GPIO_Init+0x1f6>
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	e002      	b.n	8000b96 <HAL_GPIO_Init+0x1f6>
 8000b90:	2301      	movs	r3, #1
 8000b92:	e000      	b.n	8000b96 <HAL_GPIO_Init+0x1f6>
 8000b94:	2300      	movs	r3, #0
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	f002 0203 	and.w	r2, r2, #3
 8000b9c:	0092      	lsls	r2, r2, #2
 8000b9e:	4093      	lsls	r3, r2
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ba6:	4936      	ldr	r1, [pc, #216]	; (8000c80 <HAL_GPIO_Init+0x2e0>)
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	089b      	lsrs	r3, r3, #2
 8000bac:	3302      	adds	r3, #2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bb4:	4b38      	ldr	r3, [pc, #224]	; (8000c98 <HAL_GPIO_Init+0x2f8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d003      	beq.n	8000bd8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent); 
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bd8:	4a2f      	ldr	r2, [pc, #188]	; (8000c98 <HAL_GPIO_Init+0x2f8>)
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000bde:	4b2e      	ldr	r3, [pc, #184]	; (8000c98 <HAL_GPIO_Init+0x2f8>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	43db      	mvns	r3, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d003      	beq.n	8000c02 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent); 
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c02:	4a25      	ldr	r2, [pc, #148]	; (8000c98 <HAL_GPIO_Init+0x2f8>)
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c08:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <HAL_GPIO_Init+0x2f8>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	43db      	mvns	r3, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d003      	beq.n	8000c2c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent); 
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c2c:	4a1a      	ldr	r2, [pc, #104]	; (8000c98 <HAL_GPIO_Init+0x2f8>)
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_GPIO_Init+0x2f8>)
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d003      	beq.n	8000c56 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent); 
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c56:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <HAL_GPIO_Init+0x2f8>)
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	fa22 f303 	lsr.w	r3, r2, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	f47f aea3 	bne.w	80009b8 <HAL_GPIO_Init+0x18>
  } 
}
 8000c72:	bf00      	nop
 8000c74:	371c      	adds	r7, #28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40010000 	.word	0x40010000
 8000c84:	40020000 	.word	0x40020000
 8000c88:	40020400 	.word	0x40020400
 8000c8c:	40020800 	.word	0x40020800
 8000c90:	40020c00 	.word	0x40020c00
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40010400 	.word	0x40010400

08000c9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ca8:	695a      	ldr	r2, [r3, #20]
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	4013      	ands	r3, r2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d006      	beq.n	8000cc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cb4:	88fb      	ldrh	r3, [r7, #6]
 8000cb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 fa4e 	bl	800215c <HAL_GPIO_EXTI_Callback>
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40010400 	.word	0x40010400

08000ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e31d      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cde:	4b94      	ldr	r3, [pc, #592]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	f003 030c 	and.w	r3, r3, #12
 8000ce6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ce8:	4b91      	ldr	r3, [pc, #580]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d07b      	beq.n	8000df6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	2b08      	cmp	r3, #8
 8000d02:	d006      	beq.n	8000d12 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	2b0c      	cmp	r3, #12
 8000d08:	d10f      	bne.n	8000d2a <HAL_RCC_OscConfig+0x5e>
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d10:	d10b      	bne.n	8000d2a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d12:	4b87      	ldr	r3, [pc, #540]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d06a      	beq.n	8000df4 <HAL_RCC_OscConfig+0x128>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d166      	bne.n	8000df4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e2f7      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d106      	bne.n	8000d40 <HAL_RCC_OscConfig+0x74>
 8000d32:	4b7f      	ldr	r3, [pc, #508]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a7e      	ldr	r2, [pc, #504]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	e02d      	b.n	8000d9c <HAL_RCC_OscConfig+0xd0>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10c      	bne.n	8000d62 <HAL_RCC_OscConfig+0x96>
 8000d48:	4b79      	ldr	r3, [pc, #484]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a78      	ldr	r2, [pc, #480]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	4b76      	ldr	r3, [pc, #472]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a75      	ldr	r2, [pc, #468]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	e01c      	b.n	8000d9c <HAL_RCC_OscConfig+0xd0>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b05      	cmp	r3, #5
 8000d68:	d10c      	bne.n	8000d84 <HAL_RCC_OscConfig+0xb8>
 8000d6a:	4b71      	ldr	r3, [pc, #452]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a70      	ldr	r2, [pc, #448]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	4b6e      	ldr	r3, [pc, #440]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a6d      	ldr	r2, [pc, #436]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e00b      	b.n	8000d9c <HAL_RCC_OscConfig+0xd0>
 8000d84:	4b6a      	ldr	r3, [pc, #424]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a69      	ldr	r2, [pc, #420]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	4b67      	ldr	r3, [pc, #412]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a66      	ldr	r2, [pc, #408]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d013      	beq.n	8000dcc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da4:	f7ff fa4e 	bl	8000244 <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dac:	f7ff fa4a 	bl	8000244 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b64      	cmp	r3, #100	; 0x64
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e2ad      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000dbe:	4b5c      	ldr	r3, [pc, #368]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f0      	beq.n	8000dac <HAL_RCC_OscConfig+0xe0>
 8000dca:	e014      	b.n	8000df6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fa3a 	bl	8000244 <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dd4:	f7ff fa36 	bl	8000244 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b64      	cmp	r3, #100	; 0x64
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e299      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000de6:	4b52      	ldr	r3, [pc, #328]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f0      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x108>
 8000df2:	e000      	b.n	8000df6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d05a      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	d005      	beq.n	8000e14 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	2b0c      	cmp	r3, #12
 8000e0c:	d119      	bne.n	8000e42 <HAL_RCC_OscConfig+0x176>
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d116      	bne.n	8000e42 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e14:	4b46      	ldr	r3, [pc, #280]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d005      	beq.n	8000e2c <HAL_RCC_OscConfig+0x160>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d001      	beq.n	8000e2c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e276      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2c:	4b40      	ldr	r3, [pc, #256]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	691b      	ldr	r3, [r3, #16]
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	493d      	ldr	r1, [pc, #244]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e40:	e03a      	b.n	8000eb8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d020      	beq.n	8000e8c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e4a:	4b3a      	ldr	r3, [pc, #232]	; (8000f34 <HAL_RCC_OscConfig+0x268>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e50:	f7ff f9f8 	bl	8000244 <HAL_GetTick>
 8000e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e56:	e008      	b.n	8000e6a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e58:	f7ff f9f4 	bl	8000244 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e257      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e6a:	4b31      	ldr	r3, [pc, #196]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f0      	beq.n	8000e58 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e76:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	492a      	ldr	r1, [pc, #168]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000e86:	4313      	orrs	r3, r2
 8000e88:	604b      	str	r3, [r1, #4]
 8000e8a:	e015      	b.n	8000eb8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e8c:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <HAL_RCC_OscConfig+0x268>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e92:	f7ff f9d7 	bl	8000244 <HAL_GetTick>
 8000e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e98:	e008      	b.n	8000eac <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e9a:	f7ff f9d3 	bl	8000244 <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e236      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000eac:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1f0      	bne.n	8000e9a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0310 	and.w	r3, r3, #16
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 80b8 	beq.w	8001036 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d170      	bne.n	8000fae <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d005      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x218>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d101      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e21a      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a1a      	ldr	r2, [r3, #32]
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d921      	bls.n	8000f38 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 fbd5 	bl	80016a8 <RCC_SetFlashLatencyFromMSIRange>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e208      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	4906      	ldr	r1, [pc, #24]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	061b      	lsls	r3, r3, #24
 8000f28:	4901      	ldr	r1, [pc, #4]	; (8000f30 <HAL_RCC_OscConfig+0x264>)
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	604b      	str	r3, [r1, #4]
 8000f2e:	e020      	b.n	8000f72 <HAL_RCC_OscConfig+0x2a6>
 8000f30:	40023800 	.word	0x40023800
 8000f34:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f38:	4ba4      	ldr	r3, [pc, #656]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	49a1      	ldr	r1, [pc, #644]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 8000f46:	4313      	orrs	r3, r2
 8000f48:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f4a:	4ba0      	ldr	r3, [pc, #640]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	061b      	lsls	r3, r3, #24
 8000f58:	499c      	ldr	r1, [pc, #624]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 fba0 	bl	80016a8 <RCC_SetFlashLatencyFromMSIRange>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e1d3      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a1b      	ldr	r3, [r3, #32]
 8000f76:	0b5b      	lsrs	r3, r3, #13
 8000f78:	3301      	adds	r3, #1
 8000f7a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f82:	4a92      	ldr	r2, [pc, #584]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 8000f84:	6892      	ldr	r2, [r2, #8]
 8000f86:	0912      	lsrs	r2, r2, #4
 8000f88:	f002 020f 	and.w	r2, r2, #15
 8000f8c:	4990      	ldr	r1, [pc, #576]	; (80011d0 <HAL_RCC_OscConfig+0x504>)
 8000f8e:	5c8a      	ldrb	r2, [r1, r2]
 8000f90:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000f92:	4a90      	ldr	r2, [pc, #576]	; (80011d4 <HAL_RCC_OscConfig+0x508>)
 8000f94:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f96:	4b90      	ldr	r3, [pc, #576]	; (80011d8 <HAL_RCC_OscConfig+0x50c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff f906 	bl	80001ac <HAL_InitTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d045      	beq.n	8001036 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	e1b5      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d029      	beq.n	800100a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fb6:	4b89      	ldr	r3, [pc, #548]	; (80011dc <HAL_RCC_OscConfig+0x510>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbc:	f7ff f942 	bl	8000244 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fc4:	f7ff f93e 	bl	8000244 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e1a1      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000fd6:	4b7d      	ldr	r3, [pc, #500]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0f0      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fe2:	4b7a      	ldr	r3, [pc, #488]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	4977      	ldr	r1, [pc, #476]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ff4:	4b75      	ldr	r3, [pc, #468]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	061b      	lsls	r3, r3, #24
 8001002:	4972      	ldr	r1, [pc, #456]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 8001004:	4313      	orrs	r3, r2
 8001006:	604b      	str	r3, [r1, #4]
 8001008:	e015      	b.n	8001036 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800100a:	4b74      	ldr	r3, [pc, #464]	; (80011dc <HAL_RCC_OscConfig+0x510>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff f918 	bl	8000244 <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001018:	f7ff f914 	bl	8000244 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e177      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800102a:	4b68      	ldr	r3, [pc, #416]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f0      	bne.n	8001018 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	2b00      	cmp	r3, #0
 8001040:	d030      	beq.n	80010a4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d016      	beq.n	8001078 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800104a:	4b65      	ldr	r3, [pc, #404]	; (80011e0 <HAL_RCC_OscConfig+0x514>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001050:	f7ff f8f8 	bl	8000244 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001058:	f7ff f8f4 	bl	8000244 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e157      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800106a:	4b58      	ldr	r3, [pc, #352]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 800106c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0x38c>
 8001076:	e015      	b.n	80010a4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001078:	4b59      	ldr	r3, [pc, #356]	; (80011e0 <HAL_RCC_OscConfig+0x514>)
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107e:	f7ff f8e1 	bl	8000244 <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001086:	f7ff f8dd 	bl	8000244 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e140      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001098:	4b4c      	ldr	r3, [pc, #304]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 800109a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1f0      	bne.n	8001086 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 80b5 	beq.w	800121c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010b2:	2300      	movs	r3, #0
 80010b4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010b6:	4b45      	ldr	r3, [pc, #276]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10d      	bne.n	80010de <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	4b42      	ldr	r3, [pc, #264]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	4a41      	ldr	r2, [pc, #260]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010cc:	6253      	str	r3, [r2, #36]	; 0x24
 80010ce:	4b3f      	ldr	r3, [pc, #252]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010da:	2301      	movs	r3, #1
 80010dc:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010de:	4b41      	ldr	r3, [pc, #260]	; (80011e4 <HAL_RCC_OscConfig+0x518>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d118      	bne.n	800111c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010ea:	4b3e      	ldr	r3, [pc, #248]	; (80011e4 <HAL_RCC_OscConfig+0x518>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a3d      	ldr	r2, [pc, #244]	; (80011e4 <HAL_RCC_OscConfig+0x518>)
 80010f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010f6:	f7ff f8a5 	bl	8000244 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010fe:	f7ff f8a1 	bl	8000244 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b64      	cmp	r3, #100	; 0x64
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e104      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001110:	4b34      	ldr	r3, [pc, #208]	; (80011e4 <HAL_RCC_OscConfig+0x518>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f0      	beq.n	80010fe <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d106      	bne.n	8001132 <HAL_RCC_OscConfig+0x466>
 8001124:	4b29      	ldr	r3, [pc, #164]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 8001126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001128:	4a28      	ldr	r2, [pc, #160]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 800112a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112e:	6353      	str	r3, [r2, #52]	; 0x34
 8001130:	e02d      	b.n	800118e <HAL_RCC_OscConfig+0x4c2>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10c      	bne.n	8001154 <HAL_RCC_OscConfig+0x488>
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 800113c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800113e:	4a23      	ldr	r2, [pc, #140]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 8001140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001144:	6353      	str	r3, [r2, #52]	; 0x34
 8001146:	4b21      	ldr	r3, [pc, #132]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 8001148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114a:	4a20      	ldr	r2, [pc, #128]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 800114c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001150:	6353      	str	r3, [r2, #52]	; 0x34
 8001152:	e01c      	b.n	800118e <HAL_RCC_OscConfig+0x4c2>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2b05      	cmp	r3, #5
 800115a:	d10c      	bne.n	8001176 <HAL_RCC_OscConfig+0x4aa>
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 800115e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001160:	4a1a      	ldr	r2, [pc, #104]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 8001162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001166:	6353      	str	r3, [r2, #52]	; 0x34
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 800116a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800116c:	4a17      	ldr	r2, [pc, #92]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 800116e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001172:	6353      	str	r3, [r2, #52]	; 0x34
 8001174:	e00b      	b.n	800118e <HAL_RCC_OscConfig+0x4c2>
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 8001178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117a:	4a14      	ldr	r2, [pc, #80]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 800117c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001180:	6353      	str	r3, [r2, #52]	; 0x34
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 8001184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001186:	4a11      	ldr	r2, [pc, #68]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 8001188:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800118c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d015      	beq.n	80011c2 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001196:	f7ff f855 	bl	8000244 <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800119c:	e00a      	b.n	80011b4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800119e:	f7ff f851 	bl	8000244 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e0b2      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_RCC_OscConfig+0x500>)
 80011b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0ee      	beq.n	800119e <HAL_RCC_OscConfig+0x4d2>
 80011c0:	e023      	b.n	800120a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c2:	f7ff f83f 	bl	8000244 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80011c8:	e019      	b.n	80011fe <HAL_RCC_OscConfig+0x532>
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	08003404 	.word	0x08003404
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000000 	.word	0x20000000
 80011dc:	42470020 	.word	0x42470020
 80011e0:	42470680 	.word	0x42470680
 80011e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011e8:	f7ff f82c 	bl	8000244 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e08d      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80011fe:	4b49      	ldr	r3, [pc, #292]	; (8001324 <HAL_RCC_OscConfig+0x658>)
 8001200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001202:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1ee      	bne.n	80011e8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800120a:	7ffb      	ldrb	r3, [r7, #31]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d105      	bne.n	800121c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001210:	4b44      	ldr	r3, [pc, #272]	; (8001324 <HAL_RCC_OscConfig+0x658>)
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	4a43      	ldr	r2, [pc, #268]	; (8001324 <HAL_RCC_OscConfig+0x658>)
 8001216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800121a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001220:	2b00      	cmp	r3, #0
 8001222:	d079      	beq.n	8001318 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2b0c      	cmp	r3, #12
 8001228:	d056      	beq.n	80012d8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	2b02      	cmp	r3, #2
 8001230:	d13b      	bne.n	80012aa <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001232:	4b3d      	ldr	r3, [pc, #244]	; (8001328 <HAL_RCC_OscConfig+0x65c>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff f804 	bl	8000244 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001240:	f7ff f800 	bl	8000244 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e063      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001252:	4b34      	ldr	r3, [pc, #208]	; (8001324 <HAL_RCC_OscConfig+0x658>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800125e:	4b31      	ldr	r3, [pc, #196]	; (8001324 <HAL_RCC_OscConfig+0x658>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126e:	4319      	orrs	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	430b      	orrs	r3, r1
 8001276:	492b      	ldr	r1, [pc, #172]	; (8001324 <HAL_RCC_OscConfig+0x658>)
 8001278:	4313      	orrs	r3, r2
 800127a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800127c:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <HAL_RCC_OscConfig+0x65c>)
 800127e:	2201      	movs	r2, #1
 8001280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001282:	f7fe ffdf 	bl	8000244 <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800128a:	f7fe ffdb 	bl	8000244 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e03e      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800129c:	4b21      	ldr	r3, [pc, #132]	; (8001324 <HAL_RCC_OscConfig+0x658>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0f0      	beq.n	800128a <HAL_RCC_OscConfig+0x5be>
 80012a8:	e036      	b.n	8001318 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012aa:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <HAL_RCC_OscConfig+0x65c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b0:	f7fe ffc8 	bl	8000244 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b8:	f7fe ffc4 	bl	8000244 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e027      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <HAL_RCC_OscConfig+0x658>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0x5ec>
 80012d6:	e01f      	b.n	8001318 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d101      	bne.n	80012e4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e01a      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_RCC_OscConfig+0x658>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d10d      	bne.n	8001314 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001302:	429a      	cmp	r2, r3
 8001304:	d106      	bne.n	8001314 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001310:	429a      	cmp	r2, r3
 8001312:	d001      	beq.n	8001318 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	42470060 	.word	0x42470060

0800132c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e11a      	b.n	8001576 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001340:	4b8f      	ldr	r3, [pc, #572]	; (8001580 <HAL_RCC_ClockConfig+0x254>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	d919      	bls.n	8001382 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d105      	bne.n	8001360 <HAL_RCC_ClockConfig+0x34>
 8001354:	4b8a      	ldr	r3, [pc, #552]	; (8001580 <HAL_RCC_ClockConfig+0x254>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a89      	ldr	r2, [pc, #548]	; (8001580 <HAL_RCC_ClockConfig+0x254>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b87      	ldr	r3, [pc, #540]	; (8001580 <HAL_RCC_ClockConfig+0x254>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f023 0201 	bic.w	r2, r3, #1
 8001368:	4985      	ldr	r1, [pc, #532]	; (8001580 <HAL_RCC_ClockConfig+0x254>)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	4313      	orrs	r3, r2
 800136e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001370:	4b83      	ldr	r3, [pc, #524]	; (8001580 <HAL_RCC_ClockConfig+0x254>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d001      	beq.n	8001382 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e0f9      	b.n	8001576 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d008      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800138e:	4b7d      	ldr	r3, [pc, #500]	; (8001584 <HAL_RCC_ClockConfig+0x258>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	497a      	ldr	r1, [pc, #488]	; (8001584 <HAL_RCC_ClockConfig+0x258>)
 800139c:	4313      	orrs	r3, r2
 800139e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 808e 	beq.w	80014ca <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d107      	bne.n	80013c6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013b6:	4b73      	ldr	r3, [pc, #460]	; (8001584 <HAL_RCC_ClockConfig+0x258>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d121      	bne.n	8001406 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e0d7      	b.n	8001576 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	d107      	bne.n	80013de <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013ce:	4b6d      	ldr	r3, [pc, #436]	; (8001584 <HAL_RCC_ClockConfig+0x258>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d115      	bne.n	8001406 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e0cb      	b.n	8001576 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d107      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013e6:	4b67      	ldr	r3, [pc, #412]	; (8001584 <HAL_RCC_ClockConfig+0x258>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d109      	bne.n	8001406 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e0bf      	b.n	8001576 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013f6:	4b63      	ldr	r3, [pc, #396]	; (8001584 <HAL_RCC_ClockConfig+0x258>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e0b7      	b.n	8001576 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001406:	4b5f      	ldr	r3, [pc, #380]	; (8001584 <HAL_RCC_ClockConfig+0x258>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f023 0203 	bic.w	r2, r3, #3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	495c      	ldr	r1, [pc, #368]	; (8001584 <HAL_RCC_ClockConfig+0x258>)
 8001414:	4313      	orrs	r3, r2
 8001416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001418:	f7fe ff14 	bl	8000244 <HAL_GetTick>
 800141c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d112      	bne.n	800144c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001426:	e00a      	b.n	800143e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001428:	f7fe ff0c 	bl	8000244 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f241 3288 	movw	r2, #5000	; 0x1388
 8001436:	4293      	cmp	r3, r2
 8001438:	d901      	bls.n	800143e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e09b      	b.n	8001576 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800143e:	4b51      	ldr	r3, [pc, #324]	; (8001584 <HAL_RCC_ClockConfig+0x258>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b08      	cmp	r3, #8
 8001448:	d1ee      	bne.n	8001428 <HAL_RCC_ClockConfig+0xfc>
 800144a:	e03e      	b.n	80014ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b03      	cmp	r3, #3
 8001452:	d112      	bne.n	800147a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001454:	e00a      	b.n	800146c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001456:	f7fe fef5 	bl	8000244 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	f241 3288 	movw	r2, #5000	; 0x1388
 8001464:	4293      	cmp	r3, r2
 8001466:	d901      	bls.n	800146c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e084      	b.n	8001576 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800146c:	4b45      	ldr	r3, [pc, #276]	; (8001584 <HAL_RCC_ClockConfig+0x258>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 030c 	and.w	r3, r3, #12
 8001474:	2b0c      	cmp	r3, #12
 8001476:	d1ee      	bne.n	8001456 <HAL_RCC_ClockConfig+0x12a>
 8001478:	e027      	b.n	80014ca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d11d      	bne.n	80014be <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001482:	e00a      	b.n	800149a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001484:	f7fe fede 	bl	8000244 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e06d      	b.n	8001576 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800149a:	4b3a      	ldr	r3, [pc, #232]	; (8001584 <HAL_RCC_ClockConfig+0x258>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	d1ee      	bne.n	8001484 <HAL_RCC_ClockConfig+0x158>
 80014a6:	e010      	b.n	80014ca <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a8:	f7fe fecc 	bl	8000244 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e05b      	b.n	8001576 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <HAL_RCC_ClockConfig+0x258>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1ee      	bne.n	80014a8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014ca:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <HAL_RCC_ClockConfig+0x254>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d219      	bcs.n	800150c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d105      	bne.n	80014ea <HAL_RCC_ClockConfig+0x1be>
 80014de:	4b28      	ldr	r3, [pc, #160]	; (8001580 <HAL_RCC_ClockConfig+0x254>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a27      	ldr	r2, [pc, #156]	; (8001580 <HAL_RCC_ClockConfig+0x254>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b25      	ldr	r3, [pc, #148]	; (8001580 <HAL_RCC_ClockConfig+0x254>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f023 0201 	bic.w	r2, r3, #1
 80014f2:	4923      	ldr	r1, [pc, #140]	; (8001580 <HAL_RCC_ClockConfig+0x254>)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fa:	4b21      	ldr	r3, [pc, #132]	; (8001580 <HAL_RCC_ClockConfig+0x254>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d001      	beq.n	800150c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e034      	b.n	8001576 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	d008      	beq.n	800152a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <HAL_RCC_ClockConfig+0x258>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	4917      	ldr	r1, [pc, #92]	; (8001584 <HAL_RCC_ClockConfig+0x258>)
 8001526:	4313      	orrs	r3, r2
 8001528:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d009      	beq.n	800154a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <HAL_RCC_ClockConfig+0x258>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	490f      	ldr	r1, [pc, #60]	; (8001584 <HAL_RCC_ClockConfig+0x258>)
 8001546:	4313      	orrs	r3, r2
 8001548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800154a:	f000 f823 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 800154e:	4601      	mov	r1, r0
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <HAL_RCC_ClockConfig+0x258>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	091b      	lsrs	r3, r3, #4
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <HAL_RCC_ClockConfig+0x25c>)
 800155c:	5cd3      	ldrb	r3, [r2, r3]
 800155e:	fa21 f303 	lsr.w	r3, r1, r3
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <HAL_RCC_ClockConfig+0x260>)
 8001564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HAL_RCC_ClockConfig+0x264>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe fe1e 	bl	80001ac <HAL_InitTick>
 8001570:	4603      	mov	r3, r0
 8001572:	72fb      	strb	r3, [r7, #11]

  return status;
 8001574:	7afb      	ldrb	r3, [r7, #11]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023c00 	.word	0x40023c00
 8001584:	40023800 	.word	0x40023800
 8001588:	08003404 	.word	0x08003404
 800158c:	20000008 	.word	0x20000008
 8001590:	20000000 	.word	0x20000000

08001594 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <HAL_RCC_GetSysClockFreq+0xa0>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d006      	beq.n	80015b8 <HAL_RCC_GetSysClockFreq+0x24>
 80015aa:	2b0c      	cmp	r3, #12
 80015ac:	d007      	beq.n	80015be <HAL_RCC_GetSysClockFreq+0x2a>
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d12c      	bne.n	800160c <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015b2:	4b21      	ldr	r3, [pc, #132]	; (8001638 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015b4:	613b      	str	r3, [r7, #16]
      break;
 80015b6:	e037      	b.n	8001628 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015b8:	4b20      	ldr	r3, [pc, #128]	; (800163c <HAL_RCC_GetSysClockFreq+0xa8>)
 80015ba:	613b      	str	r3, [r7, #16]
      break;
 80015bc:	e034      	b.n	8001628 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	0c9b      	lsrs	r3, r3, #18
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	4a1e      	ldr	r2, [pc, #120]	; (8001640 <HAL_RCC_GetSysClockFreq+0xac>)
 80015c8:	5cd3      	ldrb	r3, [r2, r3]
 80015ca:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	0d9b      	lsrs	r3, r3, #22
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	3301      	adds	r3, #1
 80015d6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_RCC_GetSysClockFreq+0xa0>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d008      	beq.n	80015f6 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4a15      	ldr	r2, [pc, #84]	; (800163c <HAL_RCC_GetSysClockFreq+0xa8>)
 80015e8:	fb02 f203 	mul.w	r2, r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	e007      	b.n	8001606 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <HAL_RCC_GetSysClockFreq+0xa4>)
 80015fa:	fb02 f203 	mul.w	r2, r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	fbb2 f3f3 	udiv	r3, r2, r3
 8001604:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	613b      	str	r3, [r7, #16]
      break;
 800160a:	e00d      	b.n	8001628 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_RCC_GetSysClockFreq+0xa0>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	0b5b      	lsrs	r3, r3, #13
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	613b      	str	r3, [r7, #16]
      break;
 8001626:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001628:	693b      	ldr	r3, [r7, #16]
}
 800162a:	4618      	mov	r0, r3
 800162c:	371c      	adds	r7, #28
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	40023800 	.word	0x40023800
 8001638:	00f42400 	.word	0x00f42400
 800163c:	007a1200 	.word	0x007a1200
 8001640:	080033f8 	.word	0x080033f8

08001644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001648:	4b02      	ldr	r3, [pc, #8]	; (8001654 <HAL_RCC_GetHCLKFreq+0x10>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	20000008 	.word	0x20000008

08001658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800165c:	f7ff fff2 	bl	8001644 <HAL_RCC_GetHCLKFreq>
 8001660:	4601      	mov	r1, r0
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	0a1b      	lsrs	r3, r3, #8
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	4a03      	ldr	r2, [pc, #12]	; (800167c <HAL_RCC_GetPCLK1Freq+0x24>)
 800166e:	5cd3      	ldrb	r3, [r2, r3]
 8001670:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001674:	4618      	mov	r0, r3
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40023800 	.word	0x40023800
 800167c:	08003414 	.word	0x08003414

08001680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001684:	f7ff ffde 	bl	8001644 <HAL_RCC_GetHCLKFreq>
 8001688:	4601      	mov	r1, r0
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	0adb      	lsrs	r3, r3, #11
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	4a03      	ldr	r2, [pc, #12]	; (80016a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001696:	5cd3      	ldrb	r3, [r2, r3]
 8001698:	fa21 f303 	lsr.w	r3, r1, r3
}
 800169c:	4618      	mov	r0, r3
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40023800 	.word	0x40023800
 80016a4:	08003414 	.word	0x08003414

080016a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80016b4:	4b29      	ldr	r3, [pc, #164]	; (800175c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d12c      	bne.n	800171a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80016c0:	4b26      	ldr	r3, [pc, #152]	; (800175c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80016cc:	4b24      	ldr	r3, [pc, #144]	; (8001760 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	e016      	b.n	8001706 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d8:	4b20      	ldr	r3, [pc, #128]	; (800175c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	4a1f      	ldr	r2, [pc, #124]	; (800175c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e2:	6253      	str	r3, [r2, #36]	; 0x24
 80016e4:	4b1d      	ldr	r3, [pc, #116]	; (800175c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80016f8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80016fa:	4b18      	ldr	r3, [pc, #96]	; (800175c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	4a17      	ldr	r2, [pc, #92]	; (800175c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001704:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800170c:	d105      	bne.n	800171a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001714:	d101      	bne.n	800171a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001716:	2301      	movs	r3, #1
 8001718:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f023 0201 	bic.w	r2, r3, #1
 8001734:	490b      	ldr	r1, [pc, #44]	; (8001764 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	429a      	cmp	r2, r3
 8001748:	d001      	beq.n	800174e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	371c      	adds	r7, #28
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40007000 	.word	0x40007000
 8001764:	40023c00 	.word	0x40023c00

08001768 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e03f      	b.n	80017fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d106      	bne.n	8001794 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 fd46 	bl	8002220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2224      	movs	r2, #36	; 0x24
 8001798:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f9b1 	bl	8001b14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	691a      	ldr	r2, [r3, #16]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80017c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	695a      	ldr	r2, [r3, #20]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2220      	movs	r2, #32
 80017ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2220      	movs	r2, #32
 80017f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b088      	sub	sp, #32
 8001806:	af02      	add	r7, sp, #8
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	603b      	str	r3, [r7, #0]
 800180e:	4613      	mov	r3, r2
 8001810:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b20      	cmp	r3, #32
 8001820:	f040 8083 	bne.w	800192a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d002      	beq.n	8001830 <HAL_UART_Transmit+0x2e>
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e07b      	b.n	800192c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_UART_Transmit+0x40>
 800183e:	2302      	movs	r3, #2
 8001840:	e074      	b.n	800192c <HAL_UART_Transmit+0x12a>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2221      	movs	r2, #33	; 0x21
 8001854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001858:	f7fe fcf4 	bl	8000244 <HAL_GetTick>
 800185c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	88fa      	ldrh	r2, [r7, #6]
 8001862:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	88fa      	ldrh	r2, [r7, #6]
 8001868:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800186a:	e042      	b.n	80018f2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001870:	b29b      	uxth	r3, r3
 8001872:	3b01      	subs	r3, #1
 8001874:	b29a      	uxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001882:	d122      	bne.n	80018ca <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	2200      	movs	r2, #0
 800188c:	2180      	movs	r1, #128	; 0x80
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 f8f6 	bl	8001a80 <UART_WaitOnFlagUntilTimeout>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e046      	b.n	800192c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018b0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d103      	bne.n	80018c2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	3302      	adds	r3, #2
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	e017      	b.n	80018f2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	3301      	adds	r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	e013      	b.n	80018f2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	2200      	movs	r2, #0
 80018d2:	2180      	movs	r1, #128	; 0x80
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 f8d3 	bl	8001a80 <UART_WaitOnFlagUntilTimeout>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e023      	b.n	800192c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	60ba      	str	r2, [r7, #8]
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1b7      	bne.n	800186c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	2200      	movs	r2, #0
 8001904:	2140      	movs	r1, #64	; 0x40
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 f8ba 	bl	8001a80 <UART_WaitOnFlagUntilTimeout>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e00a      	b.n	800192c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2220      	movs	r2, #32
 800191a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e000      	b.n	800192c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800192a:	2302      	movs	r3, #2
  }
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af02      	add	r7, sp, #8
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	4613      	mov	r3, r2
 8001942:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b20      	cmp	r3, #32
 8001952:	f040 8090 	bne.w	8001a76 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <HAL_UART_Receive+0x2e>
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e088      	b.n	8001a78 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_UART_Receive+0x40>
 8001970:	2302      	movs	r3, #2
 8001972:	e081      	b.n	8001a78 <HAL_UART_Receive+0x144>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2222      	movs	r2, #34	; 0x22
 8001986:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800198a:	f7fe fc5b 	bl	8000244 <HAL_GetTick>
 800198e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	88fa      	ldrh	r2, [r7, #6]
 8001994:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	88fa      	ldrh	r2, [r7, #6]
 800199a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800199c:	e05c      	b.n	8001a58 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019b4:	d12b      	bne.n	8001a0e <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	2200      	movs	r2, #0
 80019be:	2120      	movs	r1, #32
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f000 f85d 	bl	8001a80 <UART_WaitOnFlagUntilTimeout>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e053      	b.n	8001a78 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10c      	bne.n	80019f6 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	3302      	adds	r3, #2
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	e030      	b.n	8001a58 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	e024      	b.n	8001a58 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2200      	movs	r2, #0
 8001a16:	2120      	movs	r1, #32
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 f831 	bl	8001a80 <UART_WaitOnFlagUntilTimeout>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e027      	b.n	8001a78 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d108      	bne.n	8001a42 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6859      	ldr	r1, [r3, #4]
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	60ba      	str	r2, [r7, #8]
 8001a3c:	b2ca      	uxtb	r2, r1
 8001a3e:	701a      	strb	r2, [r3, #0]
 8001a40:	e00a      	b.n	8001a58 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	1c59      	adds	r1, r3, #1
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d19d      	bne.n	800199e <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2220      	movs	r2, #32
 8001a66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e000      	b.n	8001a78 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001a76:	2302      	movs	r3, #2
  }
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a90:	e02c      	b.n	8001aec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a98:	d028      	beq.n	8001aec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d007      	beq.n	8001ab0 <UART_WaitOnFlagUntilTimeout+0x30>
 8001aa0:	f7fe fbd0 	bl	8000244 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d21d      	bcs.n	8001aec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001abe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0201 	bic.w	r2, r2, #1
 8001ace:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2220      	movs	r2, #32
 8001adc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e00f      	b.n	8001b0c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	4013      	ands	r3, r2
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	bf0c      	ite	eq
 8001afc:	2301      	moveq	r3, #1
 8001afe:	2300      	movne	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	461a      	mov	r2, r3
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d0c3      	beq.n	8001a92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001b54:	f023 030c 	bic.w	r3, r3, #12
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	68f9      	ldr	r1, [r7, #12]
 8001b5e:	430b      	orrs	r3, r1
 8001b60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699a      	ldr	r2, [r3, #24]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b80:	f040 80a5 	bne.w	8001cce <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4aa4      	ldr	r2, [pc, #656]	; (8001e1c <UART_SetConfig+0x308>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d14f      	bne.n	8001c2e <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001b8e:	f7ff fd77 	bl	8001680 <HAL_RCC_GetPCLK2Freq>
 8001b92:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009a      	lsls	r2, r3, #2
 8001b9e:	441a      	add	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001baa:	4a9d      	ldr	r2, [pc, #628]	; (8001e20 <UART_SetConfig+0x30c>)
 8001bac:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb0:	095b      	lsrs	r3, r3, #5
 8001bb2:	0119      	lsls	r1, r3, #4
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	009a      	lsls	r2, r3, #2
 8001bbe:	441a      	add	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bca:	4b95      	ldr	r3, [pc, #596]	; (8001e20 <UART_SetConfig+0x30c>)
 8001bcc:	fba3 0302 	umull	r0, r3, r3, r2
 8001bd0:	095b      	lsrs	r3, r3, #5
 8001bd2:	2064      	movs	r0, #100	; 0x64
 8001bd4:	fb00 f303 	mul.w	r3, r0, r3
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	3332      	adds	r3, #50	; 0x32
 8001bde:	4a90      	ldr	r2, [pc, #576]	; (8001e20 <UART_SetConfig+0x30c>)
 8001be0:	fba2 2303 	umull	r2, r3, r2, r3
 8001be4:	095b      	lsrs	r3, r3, #5
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001bec:	4419      	add	r1, r3
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009a      	lsls	r2, r3, #2
 8001bf8:	441a      	add	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c04:	4b86      	ldr	r3, [pc, #536]	; (8001e20 <UART_SetConfig+0x30c>)
 8001c06:	fba3 0302 	umull	r0, r3, r3, r2
 8001c0a:	095b      	lsrs	r3, r3, #5
 8001c0c:	2064      	movs	r0, #100	; 0x64
 8001c0e:	fb00 f303 	mul.w	r3, r0, r3
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	3332      	adds	r3, #50	; 0x32
 8001c18:	4a81      	ldr	r2, [pc, #516]	; (8001e20 <UART_SetConfig+0x30c>)
 8001c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	f003 0207 	and.w	r2, r3, #7
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	440a      	add	r2, r1
 8001c2a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001c2c:	e0f1      	b.n	8001e12 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c2e:	f7ff fd13 	bl	8001658 <HAL_RCC_GetPCLK1Freq>
 8001c32:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009a      	lsls	r2, r3, #2
 8001c3e:	441a      	add	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	4a75      	ldr	r2, [pc, #468]	; (8001e20 <UART_SetConfig+0x30c>)
 8001c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c50:	095b      	lsrs	r3, r3, #5
 8001c52:	0119      	lsls	r1, r3, #4
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	009a      	lsls	r2, r3, #2
 8001c5e:	441a      	add	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c6a:	4b6d      	ldr	r3, [pc, #436]	; (8001e20 <UART_SetConfig+0x30c>)
 8001c6c:	fba3 0302 	umull	r0, r3, r3, r2
 8001c70:	095b      	lsrs	r3, r3, #5
 8001c72:	2064      	movs	r0, #100	; 0x64
 8001c74:	fb00 f303 	mul.w	r3, r0, r3
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	3332      	adds	r3, #50	; 0x32
 8001c7e:	4a68      	ldr	r2, [pc, #416]	; (8001e20 <UART_SetConfig+0x30c>)
 8001c80:	fba2 2303 	umull	r2, r3, r2, r3
 8001c84:	095b      	lsrs	r3, r3, #5
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001c8c:	4419      	add	r1, r3
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	009a      	lsls	r2, r3, #2
 8001c98:	441a      	add	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ca4:	4b5e      	ldr	r3, [pc, #376]	; (8001e20 <UART_SetConfig+0x30c>)
 8001ca6:	fba3 0302 	umull	r0, r3, r3, r2
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	2064      	movs	r0, #100	; 0x64
 8001cae:	fb00 f303 	mul.w	r3, r0, r3
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	3332      	adds	r3, #50	; 0x32
 8001cb8:	4a59      	ldr	r2, [pc, #356]	; (8001e20 <UART_SetConfig+0x30c>)
 8001cba:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	f003 0207 	and.w	r2, r3, #7
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	440a      	add	r2, r1
 8001cca:	609a      	str	r2, [r3, #8]
}
 8001ccc:	e0a1      	b.n	8001e12 <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a52      	ldr	r2, [pc, #328]	; (8001e1c <UART_SetConfig+0x308>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d14e      	bne.n	8001d76 <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001cd8:	f7ff fcd2 	bl	8001680 <HAL_RCC_GetPCLK2Freq>
 8001cdc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009a      	lsls	r2, r3, #2
 8001ce8:	441a      	add	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	4a4a      	ldr	r2, [pc, #296]	; (8001e20 <UART_SetConfig+0x30c>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	095b      	lsrs	r3, r3, #5
 8001cfc:	0119      	lsls	r1, r3, #4
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	009a      	lsls	r2, r3, #2
 8001d08:	441a      	add	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d14:	4b42      	ldr	r3, [pc, #264]	; (8001e20 <UART_SetConfig+0x30c>)
 8001d16:	fba3 0302 	umull	r0, r3, r3, r2
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2064      	movs	r0, #100	; 0x64
 8001d1e:	fb00 f303 	mul.w	r3, r0, r3
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	3332      	adds	r3, #50	; 0x32
 8001d28:	4a3d      	ldr	r2, [pc, #244]	; (8001e20 <UART_SetConfig+0x30c>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d34:	4419      	add	r1, r3
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009a      	lsls	r2, r3, #2
 8001d40:	441a      	add	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d4c:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <UART_SetConfig+0x30c>)
 8001d4e:	fba3 0302 	umull	r0, r3, r3, r2
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2064      	movs	r0, #100	; 0x64
 8001d56:	fb00 f303 	mul.w	r3, r0, r3
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	3332      	adds	r3, #50	; 0x32
 8001d60:	4a2f      	ldr	r2, [pc, #188]	; (8001e20 <UART_SetConfig+0x30c>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	f003 020f 	and.w	r2, r3, #15
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	440a      	add	r2, r1
 8001d72:	609a      	str	r2, [r3, #8]
}
 8001d74:	e04d      	b.n	8001e12 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d76:	f7ff fc6f 	bl	8001658 <HAL_RCC_GetPCLK1Freq>
 8001d7a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	009a      	lsls	r2, r3, #2
 8001d86:	441a      	add	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	4a23      	ldr	r2, [pc, #140]	; (8001e20 <UART_SetConfig+0x30c>)
 8001d94:	fba2 2303 	umull	r2, r3, r2, r3
 8001d98:	095b      	lsrs	r3, r3, #5
 8001d9a:	0119      	lsls	r1, r3, #4
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	009a      	lsls	r2, r3, #2
 8001da6:	441a      	add	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	fbb2 f2f3 	udiv	r2, r2, r3
 8001db2:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <UART_SetConfig+0x30c>)
 8001db4:	fba3 0302 	umull	r0, r3, r3, r2
 8001db8:	095b      	lsrs	r3, r3, #5
 8001dba:	2064      	movs	r0, #100	; 0x64
 8001dbc:	fb00 f303 	mul.w	r3, r0, r3
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	3332      	adds	r3, #50	; 0x32
 8001dc6:	4a16      	ldr	r2, [pc, #88]	; (8001e20 <UART_SetConfig+0x30c>)
 8001dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dcc:	095b      	lsrs	r3, r3, #5
 8001dce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dd2:	4419      	add	r1, r3
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	009a      	lsls	r2, r3, #2
 8001dde:	441a      	add	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <UART_SetConfig+0x30c>)
 8001dec:	fba3 0302 	umull	r0, r3, r3, r2
 8001df0:	095b      	lsrs	r3, r3, #5
 8001df2:	2064      	movs	r0, #100	; 0x64
 8001df4:	fb00 f303 	mul.w	r3, r0, r3
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	3332      	adds	r3, #50	; 0x32
 8001dfe:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <UART_SetConfig+0x30c>)
 8001e00:	fba2 2303 	umull	r2, r3, r2, r3
 8001e04:	095b      	lsrs	r3, r3, #5
 8001e06:	f003 020f 	and.w	r2, r3, #15
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	440a      	add	r2, r1
 8001e10:	609a      	str	r2, [r3, #8]
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40013800 	.word	0x40013800
 8001e20:	51eb851f 	.word	0x51eb851f

08001e24 <__io_putchar>:
#endif


/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001e2c:	1d39      	adds	r1, r7, #4
 8001e2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e32:	2201      	movs	r2, #1
 8001e34:	4803      	ldr	r0, [pc, #12]	; (8001e44 <__io_putchar+0x20>)
 8001e36:	f7ff fce4 	bl	8001802 <HAL_UART_Transmit>
	return ch;
 8001e3a:	687b      	ldr	r3, [r7, #4]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	200000a0 	.word	0x200000a0

08001e48 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
	char ch;
	HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001e4e:	1df9      	adds	r1, r7, #7
 8001e50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e54:	2201      	movs	r2, #1
 8001e56:	4804      	ldr	r0, [pc, #16]	; (8001e68 <__io_getchar+0x20>)
 8001e58:	f7ff fd6c 	bl	8001934 <HAL_UART_Receive>

	return ch;
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200000a0 	.word	0x200000a0

08001e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8001e72:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e74:	f7fe f982 	bl	800017c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e78:	f000 f850 	bl	8001f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e7c:	f000 f920 	bl	80020c0 <MX_GPIO_Init>
  MX_ADC_Init();
 8001e80:	f000 f89c 	bl	8001fbc <MX_ADC_Init>
  MX_USART2_UART_Init();
 8001e84:	f000 f8f2 	bl	800206c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t mem_buffer[CHUNK_SIZE] = {0};
 8001e88:	463b      	mov	r3, r7
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e90:	461a      	mov	r2, r3
 8001e92:	2100      	movs	r1, #0
 8001e94:	f000 fb5f 	bl	8002556 <memset>
  uint8_t *base_address = (uint8_t *)0x20000000;
 8001e98:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001e9c:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if(send_en) {
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <main+0xa4>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0fb      	beq.n	8001ea0 <main+0x34>
	  memcpy(mem_buffer, base_address, CHUNK_SIZE);
 8001ea8:	463a      	mov	r2, r7
 8001eaa:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	f000 fb42 	bl	8002540 <memcpy>
	  printf("%p\n", (void *)base_address);
 8001ebc:	f8d7 1404 	ldr.w	r1, [r7, #1028]	; 0x404
 8001ec0:	4814      	ldr	r0, [pc, #80]	; (8001f14 <main+0xa8>)
 8001ec2:	f000 fb51 	bl	8002568 <iprintf>

	  for(int c = 0; c < 1024; ++c)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8001ecc:	e00d      	b.n	8001eea <main+0x7e>
	    printf("%u ", mem_buffer[c]);
 8001ece:	463a      	mov	r2, r7
 8001ed0:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8001ed4:	4413      	add	r3, r2
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480f      	ldr	r0, [pc, #60]	; (8001f18 <main+0xac>)
 8001edc:	f000 fb44 	bl	8002568 <iprintf>
	  for(int c = 0; c < 1024; ++c)
 8001ee0:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8001eea:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8001eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef2:	dbec      	blt.n	8001ece <main+0x62>
	  printf("\n");
 8001ef4:	200a      	movs	r0, #10
 8001ef6:	f000 fb4f 	bl	8002598 <putchar>

	  base_address += CHUNK_SIZE;
 8001efa:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f02:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
	  send_en = 0;
 8001f06:	4b02      	ldr	r3, [pc, #8]	; (8001f10 <main+0xa4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
      if(send_en) {
 8001f0c:	e7c8      	b.n	8001ea0 <main+0x34>
 8001f0e:	bf00      	nop
 8001f10:	2000008c 	.word	0x2000008c
 8001f14:	080033f0 	.word	0x080033f0
 8001f18:	080033f4 	.word	0x080033f4

08001f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b092      	sub	sp, #72	; 0x48
 8001f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f22:	f107 0314 	add.w	r3, r7, #20
 8001f26:	2234      	movs	r2, #52	; 0x34
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fb13 	bl	8002556 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f30:	463b      	mov	r3, r7
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
 8001f3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <SystemClock_Config+0x9c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001f46:	4a1c      	ldr	r2, [pc, #112]	; (8001fb8 <SystemClock_Config+0x9c>)
 8001f48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f4c:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f52:	2301      	movs	r3, #1
 8001f54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f56:	2301      	movs	r3, #1
 8001f58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f5a:	2310      	movs	r3, #16
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001f68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f6c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001f6e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001f72:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fea7 	bl	8000ccc <HAL_RCC_OscConfig>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001f84:	f000 f8fa 	bl	800217c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f88:	230f      	movs	r3, #15
 8001f8a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f9c:	463b      	mov	r3, r7
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff f9c3 	bl	800132c <HAL_RCC_ClockConfig>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fac:	f000 f8e6 	bl	800217c <Error_Handler>
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	3748      	adds	r7, #72	; 0x48
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40007000 	.word	0x40007000

08001fbc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8001fcc:	4b25      	ldr	r3, [pc, #148]	; (8002064 <MX_ADC_Init+0xa8>)
 8001fce:	4a26      	ldr	r2, [pc, #152]	; (8002068 <MX_ADC_Init+0xac>)
 8001fd0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001fd2:	4b24      	ldr	r3, [pc, #144]	; (8002064 <MX_ADC_Init+0xa8>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001fd8:	4b22      	ldr	r3, [pc, #136]	; (8002064 <MX_ADC_Init+0xa8>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fde:	4b21      	ldr	r3, [pc, #132]	; (8002064 <MX_ADC_Init+0xa8>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <MX_ADC_Init+0xa8>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001fea:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <MX_ADC_Init+0xa8>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001ff0:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <MX_ADC_Init+0xa8>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <MX_ADC_Init+0xa8>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <MX_ADC_Init+0xa8>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002002:	4b18      	ldr	r3, [pc, #96]	; (8002064 <MX_ADC_Init+0xa8>)
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <MX_ADC_Init+0xa8>)
 800200c:	2201      	movs	r2, #1
 800200e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002010:	4b14      	ldr	r3, [pc, #80]	; (8002064 <MX_ADC_Init+0xa8>)
 8002012:	2200      	movs	r2, #0
 8002014:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <MX_ADC_Init+0xa8>)
 800201a:	2210      	movs	r2, #16
 800201c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <MX_ADC_Init+0xa8>)
 8002020:	2200      	movs	r2, #0
 8002022:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <MX_ADC_Init+0xa8>)
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800202c:	480d      	ldr	r0, [pc, #52]	; (8002064 <MX_ADC_Init+0xa8>)
 800202e:	f7fe f913 	bl	8000258 <HAL_ADC_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8002038:	f000 f8a0 	bl	800217c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800203c:	2310      	movs	r3, #16
 800203e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002040:	2301      	movs	r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	4619      	mov	r1, r3
 800204c:	4805      	ldr	r0, [pc, #20]	; (8002064 <MX_ADC_Init+0xa8>)
 800204e:	f7fe fa49 	bl	80004e4 <HAL_ADC_ConfigChannel>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8002058:	f000 f890 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800205c:	bf00      	nop
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	200000e0 	.word	0x200000e0
 8002068:	40012400 	.word	0x40012400

0800206c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <MX_USART2_UART_Init+0x50>)
 8002074:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19600;
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002078:	f644 4290 	movw	r2, #19600	; 0x4c90
 800207c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002092:	220c      	movs	r2, #12
 8002094:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020a2:	4805      	ldr	r0, [pc, #20]	; (80020b8 <MX_USART2_UART_Init+0x4c>)
 80020a4:	f7ff fb60 	bl	8001768 <HAL_UART_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020ae:	f000 f865 	bl	800217c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200000a0 	.word	0x200000a0
 80020bc:	40004400 	.word	0x40004400

080020c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c6:	f107 030c 	add.w	r3, r7, #12
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	60da      	str	r2, [r3, #12]
 80020d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d6:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <MX_GPIO_Init+0x90>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	4a1d      	ldr	r2, [pc, #116]	; (8002150 <MX_GPIO_Init+0x90>)
 80020dc:	f043 0304 	orr.w	r3, r3, #4
 80020e0:	61d3      	str	r3, [r2, #28]
 80020e2:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <MX_GPIO_Init+0x90>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020ee:	4b18      	ldr	r3, [pc, #96]	; (8002150 <MX_GPIO_Init+0x90>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	4a17      	ldr	r2, [pc, #92]	; (8002150 <MX_GPIO_Init+0x90>)
 80020f4:	f043 0320 	orr.w	r3, r3, #32
 80020f8:	61d3      	str	r3, [r2, #28]
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <MX_GPIO_Init+0x90>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f003 0320 	and.w	r3, r3, #32
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <MX_GPIO_Init+0x90>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	4a11      	ldr	r2, [pc, #68]	; (8002150 <MX_GPIO_Init+0x90>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	61d3      	str	r3, [r2, #28]
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <MX_GPIO_Init+0x90>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800211e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002122:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <MX_GPIO_Init+0x94>)
 8002126:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	4619      	mov	r1, r3
 8002132:	4809      	ldr	r0, [pc, #36]	; (8002158 <MX_GPIO_Init+0x98>)
 8002134:	f7fe fc34 	bl	80009a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002138:	2200      	movs	r2, #0
 800213a:	2100      	movs	r1, #0
 800213c:	2028      	movs	r0, #40	; 0x28
 800213e:	f7fe fbf8 	bl	8000932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002142:	2028      	movs	r0, #40	; 0x28
 8002144:	f7fe fc11 	bl	800096a <HAL_NVIC_EnableIRQ>

}
 8002148:	bf00      	nop
 800214a:	3720      	adds	r7, #32
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40023800 	.word	0x40023800
 8002154:	10110000 	.word	0x10110000
 8002158:	40020800 	.word	0x40020800

0800215c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	80fb      	strh	r3, [r7, #6]
	send_en = 1;
 8002166:	4b04      	ldr	r3, [pc, #16]	; (8002178 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	2000008c 	.word	0x2000008c

0800217c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800218e:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <HAL_MspInit+0x58>)
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	4a13      	ldr	r2, [pc, #76]	; (80021e0 <HAL_MspInit+0x58>)
 8002194:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002198:	6253      	str	r3, [r2, #36]	; 0x24
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <HAL_MspInit+0x58>)
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <HAL_MspInit+0x58>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a0d      	ldr	r2, [pc, #52]	; (80021e0 <HAL_MspInit+0x58>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6213      	str	r3, [r2, #32]
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_MspInit+0x58>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <HAL_MspInit+0x58>)
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <HAL_MspInit+0x58>)
 80021c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c8:	6253      	str	r3, [r2, #36]	; 0x24
 80021ca:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_MspInit+0x58>)
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d2:	607b      	str	r3, [r7, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	40023800 	.word	0x40023800

080021e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a09      	ldr	r2, [pc, #36]	; (8002218 <HAL_ADC_MspInit+0x34>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d10b      	bne.n	800220e <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_ADC_MspInit+0x38>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4a08      	ldr	r2, [pc, #32]	; (800221c <HAL_ADC_MspInit+0x38>)
 80021fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002200:	6213      	str	r3, [r2, #32]
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_ADC_MspInit+0x38>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	40012400 	.word	0x40012400
 800221c:	40023800 	.word	0x40023800

08002220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08a      	sub	sp, #40	; 0x28
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a17      	ldr	r2, [pc, #92]	; (800229c <HAL_UART_MspInit+0x7c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d127      	bne.n	8002292 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <HAL_UART_MspInit+0x80>)
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	4a16      	ldr	r2, [pc, #88]	; (80022a0 <HAL_UART_MspInit+0x80>)
 8002248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800224c:	6253      	str	r3, [r2, #36]	; 0x24
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <HAL_UART_MspInit+0x80>)
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <HAL_UART_MspInit+0x80>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	4a10      	ldr	r2, [pc, #64]	; (80022a0 <HAL_UART_MspInit+0x80>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	61d3      	str	r3, [r2, #28]
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <HAL_UART_MspInit+0x80>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002272:	230c      	movs	r3, #12
 8002274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002276:	2302      	movs	r3, #2
 8002278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800227a:	2301      	movs	r3, #1
 800227c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002282:	2307      	movs	r3, #7
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	4805      	ldr	r0, [pc, #20]	; (80022a4 <HAL_UART_MspInit+0x84>)
 800228e:	f7fe fb87 	bl	80009a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002292:	bf00      	nop
 8002294:	3728      	adds	r7, #40	; 0x28
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40004400 	.word	0x40004400
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40020000 	.word	0x40020000

080022a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b8:	e7fe      	b.n	80022b8 <HardFault_Handler+0x4>

080022ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022be:	e7fe      	b.n	80022be <MemManage_Handler+0x4>

080022c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <BusFault_Handler+0x4>

080022c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022ca:	e7fe      	b.n	80022ca <UsageFault_Handler+0x4>

080022cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f4:	f7fd ff94 	bl	8000220 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}

080022fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002300:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002304:	f7fe fcca 	bl	8000c9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI15_10_IRQn 0 */
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}

0800230c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	e00a      	b.n	8002334 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800231e:	f7ff fd93 	bl	8001e48 <__io_getchar>
 8002322:	4601      	mov	r1, r0
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	60ba      	str	r2, [r7, #8]
 800232a:	b2ca      	uxtb	r2, r1
 800232c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3301      	adds	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	dbf0      	blt.n	800231e <_read+0x12>
	}

return len;
 800233c:	687b      	ldr	r3, [r7, #4]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b086      	sub	sp, #24
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e009      	b.n	800236c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	60ba      	str	r2, [r7, #8]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fd5f 	bl	8001e24 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	3301      	adds	r3, #1
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	429a      	cmp	r2, r3
 8002372:	dbf1      	blt.n	8002358 <_write+0x12>
	}
	return len;
 8002374:	687b      	ldr	r3, [r7, #4]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <_close>:

int _close(int file)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
	return -1;
 8002386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023a4:	605a      	str	r2, [r3, #4]
	return 0;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr

080023b2 <_isatty>:

int _isatty(int file)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
	return 1;
 80023ba:	2301      	movs	r3, #1
}
 80023bc:	4618      	mov	r0, r3
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr

080023c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b085      	sub	sp, #20
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
	return 0;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
	...

080023e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <_sbrk+0x50>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d102      	bne.n	80023f6 <_sbrk+0x16>
		heap_end = &end;
 80023f0:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <_sbrk+0x50>)
 80023f2:	4a10      	ldr	r2, [pc, #64]	; (8002434 <_sbrk+0x54>)
 80023f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80023f6:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <_sbrk+0x50>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <_sbrk+0x50>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4413      	add	r3, r2
 8002404:	466a      	mov	r2, sp
 8002406:	4293      	cmp	r3, r2
 8002408:	d907      	bls.n	800241a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800240a:	f000 f86f 	bl	80024ec <__errno>
 800240e:	4602      	mov	r2, r0
 8002410:	230c      	movs	r3, #12
 8002412:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002418:	e006      	b.n	8002428 <_sbrk+0x48>
	}

	heap_end += incr;
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <_sbrk+0x50>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	4a03      	ldr	r2, [pc, #12]	; (8002430 <_sbrk+0x50>)
 8002424:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002426:	68fb      	ldr	r3, [r7, #12]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000090 	.word	0x20000090
 8002434:	20000138 	.word	0x20000138

08002438 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800243c:	4b15      	ldr	r3, [pc, #84]	; (8002494 <SystemInit+0x5c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a14      	ldr	r2, [pc, #80]	; (8002494 <SystemInit+0x5c>)
 8002442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002446:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <SystemInit+0x5c>)
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	4911      	ldr	r1, [pc, #68]	; (8002494 <SystemInit+0x5c>)
 800244e:	4b12      	ldr	r3, [pc, #72]	; (8002498 <SystemInit+0x60>)
 8002450:	4013      	ands	r3, r2
 8002452:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8002454:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <SystemInit+0x5c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0e      	ldr	r2, [pc, #56]	; (8002494 <SystemInit+0x5c>)
 800245a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800245e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8002462:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <SystemInit+0x5c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <SystemInit+0x5c>)
 800246a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800246e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <SystemInit+0x5c>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4a07      	ldr	r2, [pc, #28]	; (8002494 <SystemInit+0x5c>)
 8002476:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800247a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <SystemInit+0x5c>)
 800247e:	2200      	movs	r2, #0
 8002480:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <SystemInit+0x64>)
 8002484:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002488:	609a      	str	r2, [r3, #8]
#endif
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40023800 	.word	0x40023800
 8002498:	88ffc00c 	.word	0x88ffc00c
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80024a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80024a2:	e003      	b.n	80024ac <LoopCopyDataInit>

080024a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80024a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80024a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80024aa:	3104      	adds	r1, #4

080024ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80024ac:	480a      	ldr	r0, [pc, #40]	; (80024d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80024b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80024b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80024b4:	d3f6      	bcc.n	80024a4 <CopyDataInit>
  ldr r2, =_sbss
 80024b6:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80024b8:	e002      	b.n	80024c0 <LoopFillZerobss>

080024ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80024bc:	f842 3b04 	str.w	r3, [r2], #4

080024c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80024c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80024c4:	d3f9      	bcc.n	80024ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024c6:	f7ff ffb7 	bl	8002438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ca:	f000 f815 	bl	80024f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024ce:	f7ff fccd 	bl	8001e6c <main>
  bx lr
 80024d2:	4770      	bx	lr
  ldr r3, =_sidata
 80024d4:	080034bc 	.word	0x080034bc
  ldr r0, =_sdata
 80024d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80024dc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80024e0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80024e4:	20000138 	.word	0x20000138

080024e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024e8:	e7fe      	b.n	80024e8 <ADC1_IRQHandler>
	...

080024ec <__errno>:
 80024ec:	4b01      	ldr	r3, [pc, #4]	; (80024f4 <__errno+0x8>)
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	2000000c 	.word	0x2000000c

080024f8 <__libc_init_array>:
 80024f8:	b570      	push	{r4, r5, r6, lr}
 80024fa:	2500      	movs	r5, #0
 80024fc:	4e0c      	ldr	r6, [pc, #48]	; (8002530 <__libc_init_array+0x38>)
 80024fe:	4c0d      	ldr	r4, [pc, #52]	; (8002534 <__libc_init_array+0x3c>)
 8002500:	1ba4      	subs	r4, r4, r6
 8002502:	10a4      	asrs	r4, r4, #2
 8002504:	42a5      	cmp	r5, r4
 8002506:	d109      	bne.n	800251c <__libc_init_array+0x24>
 8002508:	f000 ff66 	bl	80033d8 <_init>
 800250c:	2500      	movs	r5, #0
 800250e:	4e0a      	ldr	r6, [pc, #40]	; (8002538 <__libc_init_array+0x40>)
 8002510:	4c0a      	ldr	r4, [pc, #40]	; (800253c <__libc_init_array+0x44>)
 8002512:	1ba4      	subs	r4, r4, r6
 8002514:	10a4      	asrs	r4, r4, #2
 8002516:	42a5      	cmp	r5, r4
 8002518:	d105      	bne.n	8002526 <__libc_init_array+0x2e>
 800251a:	bd70      	pop	{r4, r5, r6, pc}
 800251c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002520:	4798      	blx	r3
 8002522:	3501      	adds	r5, #1
 8002524:	e7ee      	b.n	8002504 <__libc_init_array+0xc>
 8002526:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800252a:	4798      	blx	r3
 800252c:	3501      	adds	r5, #1
 800252e:	e7f2      	b.n	8002516 <__libc_init_array+0x1e>
 8002530:	080034b4 	.word	0x080034b4
 8002534:	080034b4 	.word	0x080034b4
 8002538:	080034b4 	.word	0x080034b4
 800253c:	080034b8 	.word	0x080034b8

08002540 <memcpy>:
 8002540:	b510      	push	{r4, lr}
 8002542:	1e43      	subs	r3, r0, #1
 8002544:	440a      	add	r2, r1
 8002546:	4291      	cmp	r1, r2
 8002548:	d100      	bne.n	800254c <memcpy+0xc>
 800254a:	bd10      	pop	{r4, pc}
 800254c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002550:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002554:	e7f7      	b.n	8002546 <memcpy+0x6>

08002556 <memset>:
 8002556:	4603      	mov	r3, r0
 8002558:	4402      	add	r2, r0
 800255a:	4293      	cmp	r3, r2
 800255c:	d100      	bne.n	8002560 <memset+0xa>
 800255e:	4770      	bx	lr
 8002560:	f803 1b01 	strb.w	r1, [r3], #1
 8002564:	e7f9      	b.n	800255a <memset+0x4>
	...

08002568 <iprintf>:
 8002568:	b40f      	push	{r0, r1, r2, r3}
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <iprintf+0x2c>)
 800256c:	b513      	push	{r0, r1, r4, lr}
 800256e:	681c      	ldr	r4, [r3, #0]
 8002570:	b124      	cbz	r4, 800257c <iprintf+0x14>
 8002572:	69a3      	ldr	r3, [r4, #24]
 8002574:	b913      	cbnz	r3, 800257c <iprintf+0x14>
 8002576:	4620      	mov	r0, r4
 8002578:	f000 f862 	bl	8002640 <__sinit>
 800257c:	ab05      	add	r3, sp, #20
 800257e:	9a04      	ldr	r2, [sp, #16]
 8002580:	68a1      	ldr	r1, [r4, #8]
 8002582:	4620      	mov	r0, r4
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	f000 f967 	bl	8002858 <_vfiprintf_r>
 800258a:	b002      	add	sp, #8
 800258c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002590:	b004      	add	sp, #16
 8002592:	4770      	bx	lr
 8002594:	2000000c 	.word	0x2000000c

08002598 <putchar>:
 8002598:	b538      	push	{r3, r4, r5, lr}
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <putchar+0x24>)
 800259c:	4605      	mov	r5, r0
 800259e:	681c      	ldr	r4, [r3, #0]
 80025a0:	b124      	cbz	r4, 80025ac <putchar+0x14>
 80025a2:	69a3      	ldr	r3, [r4, #24]
 80025a4:	b913      	cbnz	r3, 80025ac <putchar+0x14>
 80025a6:	4620      	mov	r0, r4
 80025a8:	f000 f84a 	bl	8002640 <__sinit>
 80025ac:	68a2      	ldr	r2, [r4, #8]
 80025ae:	4629      	mov	r1, r5
 80025b0:	4620      	mov	r0, r4
 80025b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025b6:	f000 bbed 	b.w	8002d94 <_putc_r>
 80025ba:	bf00      	nop
 80025bc:	2000000c 	.word	0x2000000c

080025c0 <std>:
 80025c0:	2300      	movs	r3, #0
 80025c2:	b510      	push	{r4, lr}
 80025c4:	4604      	mov	r4, r0
 80025c6:	e9c0 3300 	strd	r3, r3, [r0]
 80025ca:	6083      	str	r3, [r0, #8]
 80025cc:	8181      	strh	r1, [r0, #12]
 80025ce:	6643      	str	r3, [r0, #100]	; 0x64
 80025d0:	81c2      	strh	r2, [r0, #14]
 80025d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80025d6:	6183      	str	r3, [r0, #24]
 80025d8:	4619      	mov	r1, r3
 80025da:	2208      	movs	r2, #8
 80025dc:	305c      	adds	r0, #92	; 0x5c
 80025de:	f7ff ffba 	bl	8002556 <memset>
 80025e2:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <std+0x38>)
 80025e4:	6224      	str	r4, [r4, #32]
 80025e6:	6263      	str	r3, [r4, #36]	; 0x24
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <std+0x3c>)
 80025ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <std+0x40>)
 80025ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <std+0x44>)
 80025f2:	6323      	str	r3, [r4, #48]	; 0x30
 80025f4:	bd10      	pop	{r4, pc}
 80025f6:	bf00      	nop
 80025f8:	08002e21 	.word	0x08002e21
 80025fc:	08002e43 	.word	0x08002e43
 8002600:	08002e7b 	.word	0x08002e7b
 8002604:	08002e9f 	.word	0x08002e9f

08002608 <_cleanup_r>:
 8002608:	4901      	ldr	r1, [pc, #4]	; (8002610 <_cleanup_r+0x8>)
 800260a:	f000 b885 	b.w	8002718 <_fwalk_reent>
 800260e:	bf00      	nop
 8002610:	08003179 	.word	0x08003179

08002614 <__sfmoreglue>:
 8002614:	b570      	push	{r4, r5, r6, lr}
 8002616:	2568      	movs	r5, #104	; 0x68
 8002618:	1e4a      	subs	r2, r1, #1
 800261a:	4355      	muls	r5, r2
 800261c:	460e      	mov	r6, r1
 800261e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002622:	f000 f897 	bl	8002754 <_malloc_r>
 8002626:	4604      	mov	r4, r0
 8002628:	b140      	cbz	r0, 800263c <__sfmoreglue+0x28>
 800262a:	2100      	movs	r1, #0
 800262c:	e9c0 1600 	strd	r1, r6, [r0]
 8002630:	300c      	adds	r0, #12
 8002632:	60a0      	str	r0, [r4, #8]
 8002634:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002638:	f7ff ff8d 	bl	8002556 <memset>
 800263c:	4620      	mov	r0, r4
 800263e:	bd70      	pop	{r4, r5, r6, pc}

08002640 <__sinit>:
 8002640:	6983      	ldr	r3, [r0, #24]
 8002642:	b510      	push	{r4, lr}
 8002644:	4604      	mov	r4, r0
 8002646:	bb33      	cbnz	r3, 8002696 <__sinit+0x56>
 8002648:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800264c:	6503      	str	r3, [r0, #80]	; 0x50
 800264e:	4b12      	ldr	r3, [pc, #72]	; (8002698 <__sinit+0x58>)
 8002650:	4a12      	ldr	r2, [pc, #72]	; (800269c <__sinit+0x5c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6282      	str	r2, [r0, #40]	; 0x28
 8002656:	4298      	cmp	r0, r3
 8002658:	bf04      	itt	eq
 800265a:	2301      	moveq	r3, #1
 800265c:	6183      	streq	r3, [r0, #24]
 800265e:	f000 f81f 	bl	80026a0 <__sfp>
 8002662:	6060      	str	r0, [r4, #4]
 8002664:	4620      	mov	r0, r4
 8002666:	f000 f81b 	bl	80026a0 <__sfp>
 800266a:	60a0      	str	r0, [r4, #8]
 800266c:	4620      	mov	r0, r4
 800266e:	f000 f817 	bl	80026a0 <__sfp>
 8002672:	2200      	movs	r2, #0
 8002674:	60e0      	str	r0, [r4, #12]
 8002676:	2104      	movs	r1, #4
 8002678:	6860      	ldr	r0, [r4, #4]
 800267a:	f7ff ffa1 	bl	80025c0 <std>
 800267e:	2201      	movs	r2, #1
 8002680:	2109      	movs	r1, #9
 8002682:	68a0      	ldr	r0, [r4, #8]
 8002684:	f7ff ff9c 	bl	80025c0 <std>
 8002688:	2202      	movs	r2, #2
 800268a:	2112      	movs	r1, #18
 800268c:	68e0      	ldr	r0, [r4, #12]
 800268e:	f7ff ff97 	bl	80025c0 <std>
 8002692:	2301      	movs	r3, #1
 8002694:	61a3      	str	r3, [r4, #24]
 8002696:	bd10      	pop	{r4, pc}
 8002698:	0800341c 	.word	0x0800341c
 800269c:	08002609 	.word	0x08002609

080026a0 <__sfp>:
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <__sfp+0x70>)
 80026a4:	4607      	mov	r7, r0
 80026a6:	681e      	ldr	r6, [r3, #0]
 80026a8:	69b3      	ldr	r3, [r6, #24]
 80026aa:	b913      	cbnz	r3, 80026b2 <__sfp+0x12>
 80026ac:	4630      	mov	r0, r6
 80026ae:	f7ff ffc7 	bl	8002640 <__sinit>
 80026b2:	3648      	adds	r6, #72	; 0x48
 80026b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	d503      	bpl.n	80026c4 <__sfp+0x24>
 80026bc:	6833      	ldr	r3, [r6, #0]
 80026be:	b133      	cbz	r3, 80026ce <__sfp+0x2e>
 80026c0:	6836      	ldr	r6, [r6, #0]
 80026c2:	e7f7      	b.n	80026b4 <__sfp+0x14>
 80026c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80026c8:	b16d      	cbz	r5, 80026e6 <__sfp+0x46>
 80026ca:	3468      	adds	r4, #104	; 0x68
 80026cc:	e7f4      	b.n	80026b8 <__sfp+0x18>
 80026ce:	2104      	movs	r1, #4
 80026d0:	4638      	mov	r0, r7
 80026d2:	f7ff ff9f 	bl	8002614 <__sfmoreglue>
 80026d6:	6030      	str	r0, [r6, #0]
 80026d8:	2800      	cmp	r0, #0
 80026da:	d1f1      	bne.n	80026c0 <__sfp+0x20>
 80026dc:	230c      	movs	r3, #12
 80026de:	4604      	mov	r4, r0
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	4620      	mov	r0, r4
 80026e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026e6:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <__sfp+0x74>)
 80026e8:	6665      	str	r5, [r4, #100]	; 0x64
 80026ea:	e9c4 5500 	strd	r5, r5, [r4]
 80026ee:	60a5      	str	r5, [r4, #8]
 80026f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80026f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80026f8:	2208      	movs	r2, #8
 80026fa:	4629      	mov	r1, r5
 80026fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002700:	f7ff ff29 	bl	8002556 <memset>
 8002704:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002708:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800270c:	e7e9      	b.n	80026e2 <__sfp+0x42>
 800270e:	bf00      	nop
 8002710:	0800341c 	.word	0x0800341c
 8002714:	ffff0001 	.word	0xffff0001

08002718 <_fwalk_reent>:
 8002718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800271c:	4680      	mov	r8, r0
 800271e:	4689      	mov	r9, r1
 8002720:	2600      	movs	r6, #0
 8002722:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002726:	b914      	cbnz	r4, 800272e <_fwalk_reent+0x16>
 8002728:	4630      	mov	r0, r6
 800272a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800272e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002732:	3f01      	subs	r7, #1
 8002734:	d501      	bpl.n	800273a <_fwalk_reent+0x22>
 8002736:	6824      	ldr	r4, [r4, #0]
 8002738:	e7f5      	b.n	8002726 <_fwalk_reent+0xe>
 800273a:	89ab      	ldrh	r3, [r5, #12]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d907      	bls.n	8002750 <_fwalk_reent+0x38>
 8002740:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002744:	3301      	adds	r3, #1
 8002746:	d003      	beq.n	8002750 <_fwalk_reent+0x38>
 8002748:	4629      	mov	r1, r5
 800274a:	4640      	mov	r0, r8
 800274c:	47c8      	blx	r9
 800274e:	4306      	orrs	r6, r0
 8002750:	3568      	adds	r5, #104	; 0x68
 8002752:	e7ee      	b.n	8002732 <_fwalk_reent+0x1a>

08002754 <_malloc_r>:
 8002754:	b570      	push	{r4, r5, r6, lr}
 8002756:	1ccd      	adds	r5, r1, #3
 8002758:	f025 0503 	bic.w	r5, r5, #3
 800275c:	3508      	adds	r5, #8
 800275e:	2d0c      	cmp	r5, #12
 8002760:	bf38      	it	cc
 8002762:	250c      	movcc	r5, #12
 8002764:	2d00      	cmp	r5, #0
 8002766:	4606      	mov	r6, r0
 8002768:	db01      	blt.n	800276e <_malloc_r+0x1a>
 800276a:	42a9      	cmp	r1, r5
 800276c:	d903      	bls.n	8002776 <_malloc_r+0x22>
 800276e:	230c      	movs	r3, #12
 8002770:	6033      	str	r3, [r6, #0]
 8002772:	2000      	movs	r0, #0
 8002774:	bd70      	pop	{r4, r5, r6, pc}
 8002776:	f000 fdad 	bl	80032d4 <__malloc_lock>
 800277a:	4a21      	ldr	r2, [pc, #132]	; (8002800 <_malloc_r+0xac>)
 800277c:	6814      	ldr	r4, [r2, #0]
 800277e:	4621      	mov	r1, r4
 8002780:	b991      	cbnz	r1, 80027a8 <_malloc_r+0x54>
 8002782:	4c20      	ldr	r4, [pc, #128]	; (8002804 <_malloc_r+0xb0>)
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	b91b      	cbnz	r3, 8002790 <_malloc_r+0x3c>
 8002788:	4630      	mov	r0, r6
 800278a:	f000 fb39 	bl	8002e00 <_sbrk_r>
 800278e:	6020      	str	r0, [r4, #0]
 8002790:	4629      	mov	r1, r5
 8002792:	4630      	mov	r0, r6
 8002794:	f000 fb34 	bl	8002e00 <_sbrk_r>
 8002798:	1c43      	adds	r3, r0, #1
 800279a:	d124      	bne.n	80027e6 <_malloc_r+0x92>
 800279c:	230c      	movs	r3, #12
 800279e:	4630      	mov	r0, r6
 80027a0:	6033      	str	r3, [r6, #0]
 80027a2:	f000 fd98 	bl	80032d6 <__malloc_unlock>
 80027a6:	e7e4      	b.n	8002772 <_malloc_r+0x1e>
 80027a8:	680b      	ldr	r3, [r1, #0]
 80027aa:	1b5b      	subs	r3, r3, r5
 80027ac:	d418      	bmi.n	80027e0 <_malloc_r+0x8c>
 80027ae:	2b0b      	cmp	r3, #11
 80027b0:	d90f      	bls.n	80027d2 <_malloc_r+0x7e>
 80027b2:	600b      	str	r3, [r1, #0]
 80027b4:	18cc      	adds	r4, r1, r3
 80027b6:	50cd      	str	r5, [r1, r3]
 80027b8:	4630      	mov	r0, r6
 80027ba:	f000 fd8c 	bl	80032d6 <__malloc_unlock>
 80027be:	f104 000b 	add.w	r0, r4, #11
 80027c2:	1d23      	adds	r3, r4, #4
 80027c4:	f020 0007 	bic.w	r0, r0, #7
 80027c8:	1ac3      	subs	r3, r0, r3
 80027ca:	d0d3      	beq.n	8002774 <_malloc_r+0x20>
 80027cc:	425a      	negs	r2, r3
 80027ce:	50e2      	str	r2, [r4, r3]
 80027d0:	e7d0      	b.n	8002774 <_malloc_r+0x20>
 80027d2:	684b      	ldr	r3, [r1, #4]
 80027d4:	428c      	cmp	r4, r1
 80027d6:	bf16      	itet	ne
 80027d8:	6063      	strne	r3, [r4, #4]
 80027da:	6013      	streq	r3, [r2, #0]
 80027dc:	460c      	movne	r4, r1
 80027de:	e7eb      	b.n	80027b8 <_malloc_r+0x64>
 80027e0:	460c      	mov	r4, r1
 80027e2:	6849      	ldr	r1, [r1, #4]
 80027e4:	e7cc      	b.n	8002780 <_malloc_r+0x2c>
 80027e6:	1cc4      	adds	r4, r0, #3
 80027e8:	f024 0403 	bic.w	r4, r4, #3
 80027ec:	42a0      	cmp	r0, r4
 80027ee:	d005      	beq.n	80027fc <_malloc_r+0xa8>
 80027f0:	1a21      	subs	r1, r4, r0
 80027f2:	4630      	mov	r0, r6
 80027f4:	f000 fb04 	bl	8002e00 <_sbrk_r>
 80027f8:	3001      	adds	r0, #1
 80027fa:	d0cf      	beq.n	800279c <_malloc_r+0x48>
 80027fc:	6025      	str	r5, [r4, #0]
 80027fe:	e7db      	b.n	80027b8 <_malloc_r+0x64>
 8002800:	20000094 	.word	0x20000094
 8002804:	20000098 	.word	0x20000098

08002808 <__sfputc_r>:
 8002808:	6893      	ldr	r3, [r2, #8]
 800280a:	b410      	push	{r4}
 800280c:	3b01      	subs	r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	6093      	str	r3, [r2, #8]
 8002812:	da07      	bge.n	8002824 <__sfputc_r+0x1c>
 8002814:	6994      	ldr	r4, [r2, #24]
 8002816:	42a3      	cmp	r3, r4
 8002818:	db01      	blt.n	800281e <__sfputc_r+0x16>
 800281a:	290a      	cmp	r1, #10
 800281c:	d102      	bne.n	8002824 <__sfputc_r+0x1c>
 800281e:	bc10      	pop	{r4}
 8002820:	f000 bb42 	b.w	8002ea8 <__swbuf_r>
 8002824:	6813      	ldr	r3, [r2, #0]
 8002826:	1c58      	adds	r0, r3, #1
 8002828:	6010      	str	r0, [r2, #0]
 800282a:	7019      	strb	r1, [r3, #0]
 800282c:	4608      	mov	r0, r1
 800282e:	bc10      	pop	{r4}
 8002830:	4770      	bx	lr

08002832 <__sfputs_r>:
 8002832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002834:	4606      	mov	r6, r0
 8002836:	460f      	mov	r7, r1
 8002838:	4614      	mov	r4, r2
 800283a:	18d5      	adds	r5, r2, r3
 800283c:	42ac      	cmp	r4, r5
 800283e:	d101      	bne.n	8002844 <__sfputs_r+0x12>
 8002840:	2000      	movs	r0, #0
 8002842:	e007      	b.n	8002854 <__sfputs_r+0x22>
 8002844:	463a      	mov	r2, r7
 8002846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800284a:	4630      	mov	r0, r6
 800284c:	f7ff ffdc 	bl	8002808 <__sfputc_r>
 8002850:	1c43      	adds	r3, r0, #1
 8002852:	d1f3      	bne.n	800283c <__sfputs_r+0xa>
 8002854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002858 <_vfiprintf_r>:
 8002858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800285c:	460c      	mov	r4, r1
 800285e:	b09d      	sub	sp, #116	; 0x74
 8002860:	4617      	mov	r7, r2
 8002862:	461d      	mov	r5, r3
 8002864:	4606      	mov	r6, r0
 8002866:	b118      	cbz	r0, 8002870 <_vfiprintf_r+0x18>
 8002868:	6983      	ldr	r3, [r0, #24]
 800286a:	b90b      	cbnz	r3, 8002870 <_vfiprintf_r+0x18>
 800286c:	f7ff fee8 	bl	8002640 <__sinit>
 8002870:	4b7c      	ldr	r3, [pc, #496]	; (8002a64 <_vfiprintf_r+0x20c>)
 8002872:	429c      	cmp	r4, r3
 8002874:	d158      	bne.n	8002928 <_vfiprintf_r+0xd0>
 8002876:	6874      	ldr	r4, [r6, #4]
 8002878:	89a3      	ldrh	r3, [r4, #12]
 800287a:	0718      	lsls	r0, r3, #28
 800287c:	d55e      	bpl.n	800293c <_vfiprintf_r+0xe4>
 800287e:	6923      	ldr	r3, [r4, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d05b      	beq.n	800293c <_vfiprintf_r+0xe4>
 8002884:	2300      	movs	r3, #0
 8002886:	9309      	str	r3, [sp, #36]	; 0x24
 8002888:	2320      	movs	r3, #32
 800288a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800288e:	2330      	movs	r3, #48	; 0x30
 8002890:	f04f 0b01 	mov.w	fp, #1
 8002894:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002898:	9503      	str	r5, [sp, #12]
 800289a:	46b8      	mov	r8, r7
 800289c:	4645      	mov	r5, r8
 800289e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80028a2:	b10b      	cbz	r3, 80028a8 <_vfiprintf_r+0x50>
 80028a4:	2b25      	cmp	r3, #37	; 0x25
 80028a6:	d154      	bne.n	8002952 <_vfiprintf_r+0xfa>
 80028a8:	ebb8 0a07 	subs.w	sl, r8, r7
 80028ac:	d00b      	beq.n	80028c6 <_vfiprintf_r+0x6e>
 80028ae:	4653      	mov	r3, sl
 80028b0:	463a      	mov	r2, r7
 80028b2:	4621      	mov	r1, r4
 80028b4:	4630      	mov	r0, r6
 80028b6:	f7ff ffbc 	bl	8002832 <__sfputs_r>
 80028ba:	3001      	adds	r0, #1
 80028bc:	f000 80c2 	beq.w	8002a44 <_vfiprintf_r+0x1ec>
 80028c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028c2:	4453      	add	r3, sl
 80028c4:	9309      	str	r3, [sp, #36]	; 0x24
 80028c6:	f898 3000 	ldrb.w	r3, [r8]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 80ba 	beq.w	8002a44 <_vfiprintf_r+0x1ec>
 80028d0:	2300      	movs	r3, #0
 80028d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028da:	9304      	str	r3, [sp, #16]
 80028dc:	9307      	str	r3, [sp, #28]
 80028de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028e2:	931a      	str	r3, [sp, #104]	; 0x68
 80028e4:	46a8      	mov	r8, r5
 80028e6:	2205      	movs	r2, #5
 80028e8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80028ec:	485e      	ldr	r0, [pc, #376]	; (8002a68 <_vfiprintf_r+0x210>)
 80028ee:	f000 fce3 	bl	80032b8 <memchr>
 80028f2:	9b04      	ldr	r3, [sp, #16]
 80028f4:	bb78      	cbnz	r0, 8002956 <_vfiprintf_r+0xfe>
 80028f6:	06d9      	lsls	r1, r3, #27
 80028f8:	bf44      	itt	mi
 80028fa:	2220      	movmi	r2, #32
 80028fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002900:	071a      	lsls	r2, r3, #28
 8002902:	bf44      	itt	mi
 8002904:	222b      	movmi	r2, #43	; 0x2b
 8002906:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800290a:	782a      	ldrb	r2, [r5, #0]
 800290c:	2a2a      	cmp	r2, #42	; 0x2a
 800290e:	d02a      	beq.n	8002966 <_vfiprintf_r+0x10e>
 8002910:	46a8      	mov	r8, r5
 8002912:	2000      	movs	r0, #0
 8002914:	250a      	movs	r5, #10
 8002916:	9a07      	ldr	r2, [sp, #28]
 8002918:	4641      	mov	r1, r8
 800291a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800291e:	3b30      	subs	r3, #48	; 0x30
 8002920:	2b09      	cmp	r3, #9
 8002922:	d969      	bls.n	80029f8 <_vfiprintf_r+0x1a0>
 8002924:	b360      	cbz	r0, 8002980 <_vfiprintf_r+0x128>
 8002926:	e024      	b.n	8002972 <_vfiprintf_r+0x11a>
 8002928:	4b50      	ldr	r3, [pc, #320]	; (8002a6c <_vfiprintf_r+0x214>)
 800292a:	429c      	cmp	r4, r3
 800292c:	d101      	bne.n	8002932 <_vfiprintf_r+0xda>
 800292e:	68b4      	ldr	r4, [r6, #8]
 8002930:	e7a2      	b.n	8002878 <_vfiprintf_r+0x20>
 8002932:	4b4f      	ldr	r3, [pc, #316]	; (8002a70 <_vfiprintf_r+0x218>)
 8002934:	429c      	cmp	r4, r3
 8002936:	bf08      	it	eq
 8002938:	68f4      	ldreq	r4, [r6, #12]
 800293a:	e79d      	b.n	8002878 <_vfiprintf_r+0x20>
 800293c:	4621      	mov	r1, r4
 800293e:	4630      	mov	r0, r6
 8002940:	f000 fb16 	bl	8002f70 <__swsetup_r>
 8002944:	2800      	cmp	r0, #0
 8002946:	d09d      	beq.n	8002884 <_vfiprintf_r+0x2c>
 8002948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800294c:	b01d      	add	sp, #116	; 0x74
 800294e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002952:	46a8      	mov	r8, r5
 8002954:	e7a2      	b.n	800289c <_vfiprintf_r+0x44>
 8002956:	4a44      	ldr	r2, [pc, #272]	; (8002a68 <_vfiprintf_r+0x210>)
 8002958:	4645      	mov	r5, r8
 800295a:	1a80      	subs	r0, r0, r2
 800295c:	fa0b f000 	lsl.w	r0, fp, r0
 8002960:	4318      	orrs	r0, r3
 8002962:	9004      	str	r0, [sp, #16]
 8002964:	e7be      	b.n	80028e4 <_vfiprintf_r+0x8c>
 8002966:	9a03      	ldr	r2, [sp, #12]
 8002968:	1d11      	adds	r1, r2, #4
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	9103      	str	r1, [sp, #12]
 800296e:	2a00      	cmp	r2, #0
 8002970:	db01      	blt.n	8002976 <_vfiprintf_r+0x11e>
 8002972:	9207      	str	r2, [sp, #28]
 8002974:	e004      	b.n	8002980 <_vfiprintf_r+0x128>
 8002976:	4252      	negs	r2, r2
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	9207      	str	r2, [sp, #28]
 800297e:	9304      	str	r3, [sp, #16]
 8002980:	f898 3000 	ldrb.w	r3, [r8]
 8002984:	2b2e      	cmp	r3, #46	; 0x2e
 8002986:	d10e      	bne.n	80029a6 <_vfiprintf_r+0x14e>
 8002988:	f898 3001 	ldrb.w	r3, [r8, #1]
 800298c:	2b2a      	cmp	r3, #42	; 0x2a
 800298e:	d138      	bne.n	8002a02 <_vfiprintf_r+0x1aa>
 8002990:	9b03      	ldr	r3, [sp, #12]
 8002992:	f108 0802 	add.w	r8, r8, #2
 8002996:	1d1a      	adds	r2, r3, #4
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	9203      	str	r2, [sp, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	bfb8      	it	lt
 80029a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80029a4:	9305      	str	r3, [sp, #20]
 80029a6:	4d33      	ldr	r5, [pc, #204]	; (8002a74 <_vfiprintf_r+0x21c>)
 80029a8:	2203      	movs	r2, #3
 80029aa:	f898 1000 	ldrb.w	r1, [r8]
 80029ae:	4628      	mov	r0, r5
 80029b0:	f000 fc82 	bl	80032b8 <memchr>
 80029b4:	b140      	cbz	r0, 80029c8 <_vfiprintf_r+0x170>
 80029b6:	2340      	movs	r3, #64	; 0x40
 80029b8:	1b40      	subs	r0, r0, r5
 80029ba:	fa03 f000 	lsl.w	r0, r3, r0
 80029be:	9b04      	ldr	r3, [sp, #16]
 80029c0:	f108 0801 	add.w	r8, r8, #1
 80029c4:	4303      	orrs	r3, r0
 80029c6:	9304      	str	r3, [sp, #16]
 80029c8:	f898 1000 	ldrb.w	r1, [r8]
 80029cc:	2206      	movs	r2, #6
 80029ce:	482a      	ldr	r0, [pc, #168]	; (8002a78 <_vfiprintf_r+0x220>)
 80029d0:	f108 0701 	add.w	r7, r8, #1
 80029d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029d8:	f000 fc6e 	bl	80032b8 <memchr>
 80029dc:	2800      	cmp	r0, #0
 80029de:	d037      	beq.n	8002a50 <_vfiprintf_r+0x1f8>
 80029e0:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <_vfiprintf_r+0x224>)
 80029e2:	bb1b      	cbnz	r3, 8002a2c <_vfiprintf_r+0x1d4>
 80029e4:	9b03      	ldr	r3, [sp, #12]
 80029e6:	3307      	adds	r3, #7
 80029e8:	f023 0307 	bic.w	r3, r3, #7
 80029ec:	3308      	adds	r3, #8
 80029ee:	9303      	str	r3, [sp, #12]
 80029f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029f2:	444b      	add	r3, r9
 80029f4:	9309      	str	r3, [sp, #36]	; 0x24
 80029f6:	e750      	b.n	800289a <_vfiprintf_r+0x42>
 80029f8:	fb05 3202 	mla	r2, r5, r2, r3
 80029fc:	2001      	movs	r0, #1
 80029fe:	4688      	mov	r8, r1
 8002a00:	e78a      	b.n	8002918 <_vfiprintf_r+0xc0>
 8002a02:	2300      	movs	r3, #0
 8002a04:	250a      	movs	r5, #10
 8002a06:	4619      	mov	r1, r3
 8002a08:	f108 0801 	add.w	r8, r8, #1
 8002a0c:	9305      	str	r3, [sp, #20]
 8002a0e:	4640      	mov	r0, r8
 8002a10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a14:	3a30      	subs	r2, #48	; 0x30
 8002a16:	2a09      	cmp	r2, #9
 8002a18:	d903      	bls.n	8002a22 <_vfiprintf_r+0x1ca>
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0c3      	beq.n	80029a6 <_vfiprintf_r+0x14e>
 8002a1e:	9105      	str	r1, [sp, #20]
 8002a20:	e7c1      	b.n	80029a6 <_vfiprintf_r+0x14e>
 8002a22:	fb05 2101 	mla	r1, r5, r1, r2
 8002a26:	2301      	movs	r3, #1
 8002a28:	4680      	mov	r8, r0
 8002a2a:	e7f0      	b.n	8002a0e <_vfiprintf_r+0x1b6>
 8002a2c:	ab03      	add	r3, sp, #12
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	4622      	mov	r2, r4
 8002a32:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <_vfiprintf_r+0x228>)
 8002a34:	a904      	add	r1, sp, #16
 8002a36:	4630      	mov	r0, r6
 8002a38:	f3af 8000 	nop.w
 8002a3c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002a40:	4681      	mov	r9, r0
 8002a42:	d1d5      	bne.n	80029f0 <_vfiprintf_r+0x198>
 8002a44:	89a3      	ldrh	r3, [r4, #12]
 8002a46:	065b      	lsls	r3, r3, #25
 8002a48:	f53f af7e 	bmi.w	8002948 <_vfiprintf_r+0xf0>
 8002a4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a4e:	e77d      	b.n	800294c <_vfiprintf_r+0xf4>
 8002a50:	ab03      	add	r3, sp, #12
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	4622      	mov	r2, r4
 8002a56:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <_vfiprintf_r+0x228>)
 8002a58:	a904      	add	r1, sp, #16
 8002a5a:	4630      	mov	r0, r6
 8002a5c:	f000 f888 	bl	8002b70 <_printf_i>
 8002a60:	e7ec      	b.n	8002a3c <_vfiprintf_r+0x1e4>
 8002a62:	bf00      	nop
 8002a64:	08003440 	.word	0x08003440
 8002a68:	08003480 	.word	0x08003480
 8002a6c:	08003460 	.word	0x08003460
 8002a70:	08003420 	.word	0x08003420
 8002a74:	08003486 	.word	0x08003486
 8002a78:	0800348a 	.word	0x0800348a
 8002a7c:	00000000 	.word	0x00000000
 8002a80:	08002833 	.word	0x08002833

08002a84 <_printf_common>:
 8002a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a88:	4691      	mov	r9, r2
 8002a8a:	461f      	mov	r7, r3
 8002a8c:	688a      	ldr	r2, [r1, #8]
 8002a8e:	690b      	ldr	r3, [r1, #16]
 8002a90:	4606      	mov	r6, r0
 8002a92:	4293      	cmp	r3, r2
 8002a94:	bfb8      	it	lt
 8002a96:	4613      	movlt	r3, r2
 8002a98:	f8c9 3000 	str.w	r3, [r9]
 8002a9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002aa0:	460c      	mov	r4, r1
 8002aa2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002aa6:	b112      	cbz	r2, 8002aae <_printf_common+0x2a>
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	f8c9 3000 	str.w	r3, [r9]
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	0699      	lsls	r1, r3, #26
 8002ab2:	bf42      	ittt	mi
 8002ab4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002ab8:	3302      	addmi	r3, #2
 8002aba:	f8c9 3000 	strmi.w	r3, [r9]
 8002abe:	6825      	ldr	r5, [r4, #0]
 8002ac0:	f015 0506 	ands.w	r5, r5, #6
 8002ac4:	d107      	bne.n	8002ad6 <_printf_common+0x52>
 8002ac6:	f104 0a19 	add.w	sl, r4, #25
 8002aca:	68e3      	ldr	r3, [r4, #12]
 8002acc:	f8d9 2000 	ldr.w	r2, [r9]
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	42ab      	cmp	r3, r5
 8002ad4:	dc29      	bgt.n	8002b2a <_printf_common+0xa6>
 8002ad6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002ada:	6822      	ldr	r2, [r4, #0]
 8002adc:	3300      	adds	r3, #0
 8002ade:	bf18      	it	ne
 8002ae0:	2301      	movne	r3, #1
 8002ae2:	0692      	lsls	r2, r2, #26
 8002ae4:	d42e      	bmi.n	8002b44 <_printf_common+0xc0>
 8002ae6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002aea:	4639      	mov	r1, r7
 8002aec:	4630      	mov	r0, r6
 8002aee:	47c0      	blx	r8
 8002af0:	3001      	adds	r0, #1
 8002af2:	d021      	beq.n	8002b38 <_printf_common+0xb4>
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	68e5      	ldr	r5, [r4, #12]
 8002af8:	f003 0306 	and.w	r3, r3, #6
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	bf18      	it	ne
 8002b00:	2500      	movne	r5, #0
 8002b02:	f8d9 2000 	ldr.w	r2, [r9]
 8002b06:	f04f 0900 	mov.w	r9, #0
 8002b0a:	bf08      	it	eq
 8002b0c:	1aad      	subeq	r5, r5, r2
 8002b0e:	68a3      	ldr	r3, [r4, #8]
 8002b10:	6922      	ldr	r2, [r4, #16]
 8002b12:	bf08      	it	eq
 8002b14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	bfc4      	itt	gt
 8002b1c:	1a9b      	subgt	r3, r3, r2
 8002b1e:	18ed      	addgt	r5, r5, r3
 8002b20:	341a      	adds	r4, #26
 8002b22:	454d      	cmp	r5, r9
 8002b24:	d11a      	bne.n	8002b5c <_printf_common+0xd8>
 8002b26:	2000      	movs	r0, #0
 8002b28:	e008      	b.n	8002b3c <_printf_common+0xb8>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	4652      	mov	r2, sl
 8002b2e:	4639      	mov	r1, r7
 8002b30:	4630      	mov	r0, r6
 8002b32:	47c0      	blx	r8
 8002b34:	3001      	adds	r0, #1
 8002b36:	d103      	bne.n	8002b40 <_printf_common+0xbc>
 8002b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b40:	3501      	adds	r5, #1
 8002b42:	e7c2      	b.n	8002aca <_printf_common+0x46>
 8002b44:	2030      	movs	r0, #48	; 0x30
 8002b46:	18e1      	adds	r1, r4, r3
 8002b48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b52:	4422      	add	r2, r4
 8002b54:	3302      	adds	r3, #2
 8002b56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b5a:	e7c4      	b.n	8002ae6 <_printf_common+0x62>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	4622      	mov	r2, r4
 8002b60:	4639      	mov	r1, r7
 8002b62:	4630      	mov	r0, r6
 8002b64:	47c0      	blx	r8
 8002b66:	3001      	adds	r0, #1
 8002b68:	d0e6      	beq.n	8002b38 <_printf_common+0xb4>
 8002b6a:	f109 0901 	add.w	r9, r9, #1
 8002b6e:	e7d8      	b.n	8002b22 <_printf_common+0x9e>

08002b70 <_printf_i>:
 8002b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002b78:	460c      	mov	r4, r1
 8002b7a:	7e09      	ldrb	r1, [r1, #24]
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	296e      	cmp	r1, #110	; 0x6e
 8002b80:	4617      	mov	r7, r2
 8002b82:	4606      	mov	r6, r0
 8002b84:	4698      	mov	r8, r3
 8002b86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b88:	f000 80b3 	beq.w	8002cf2 <_printf_i+0x182>
 8002b8c:	d822      	bhi.n	8002bd4 <_printf_i+0x64>
 8002b8e:	2963      	cmp	r1, #99	; 0x63
 8002b90:	d036      	beq.n	8002c00 <_printf_i+0x90>
 8002b92:	d80a      	bhi.n	8002baa <_printf_i+0x3a>
 8002b94:	2900      	cmp	r1, #0
 8002b96:	f000 80b9 	beq.w	8002d0c <_printf_i+0x19c>
 8002b9a:	2958      	cmp	r1, #88	; 0x58
 8002b9c:	f000 8083 	beq.w	8002ca6 <_printf_i+0x136>
 8002ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ba4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002ba8:	e032      	b.n	8002c10 <_printf_i+0xa0>
 8002baa:	2964      	cmp	r1, #100	; 0x64
 8002bac:	d001      	beq.n	8002bb2 <_printf_i+0x42>
 8002bae:	2969      	cmp	r1, #105	; 0x69
 8002bb0:	d1f6      	bne.n	8002ba0 <_printf_i+0x30>
 8002bb2:	6820      	ldr	r0, [r4, #0]
 8002bb4:	6813      	ldr	r3, [r2, #0]
 8002bb6:	0605      	lsls	r5, r0, #24
 8002bb8:	f103 0104 	add.w	r1, r3, #4
 8002bbc:	d52a      	bpl.n	8002c14 <_printf_i+0xa4>
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6011      	str	r1, [r2, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	da03      	bge.n	8002bce <_printf_i+0x5e>
 8002bc6:	222d      	movs	r2, #45	; 0x2d
 8002bc8:	425b      	negs	r3, r3
 8002bca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002bce:	486f      	ldr	r0, [pc, #444]	; (8002d8c <_printf_i+0x21c>)
 8002bd0:	220a      	movs	r2, #10
 8002bd2:	e039      	b.n	8002c48 <_printf_i+0xd8>
 8002bd4:	2973      	cmp	r1, #115	; 0x73
 8002bd6:	f000 809d 	beq.w	8002d14 <_printf_i+0x1a4>
 8002bda:	d808      	bhi.n	8002bee <_printf_i+0x7e>
 8002bdc:	296f      	cmp	r1, #111	; 0x6f
 8002bde:	d020      	beq.n	8002c22 <_printf_i+0xb2>
 8002be0:	2970      	cmp	r1, #112	; 0x70
 8002be2:	d1dd      	bne.n	8002ba0 <_printf_i+0x30>
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	f043 0320 	orr.w	r3, r3, #32
 8002bea:	6023      	str	r3, [r4, #0]
 8002bec:	e003      	b.n	8002bf6 <_printf_i+0x86>
 8002bee:	2975      	cmp	r1, #117	; 0x75
 8002bf0:	d017      	beq.n	8002c22 <_printf_i+0xb2>
 8002bf2:	2978      	cmp	r1, #120	; 0x78
 8002bf4:	d1d4      	bne.n	8002ba0 <_printf_i+0x30>
 8002bf6:	2378      	movs	r3, #120	; 0x78
 8002bf8:	4865      	ldr	r0, [pc, #404]	; (8002d90 <_printf_i+0x220>)
 8002bfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002bfe:	e055      	b.n	8002cac <_printf_i+0x13c>
 8002c00:	6813      	ldr	r3, [r2, #0]
 8002c02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c06:	1d19      	adds	r1, r3, #4
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6011      	str	r1, [r2, #0]
 8002c0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c10:	2301      	movs	r3, #1
 8002c12:	e08c      	b.n	8002d2e <_printf_i+0x1be>
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c1a:	6011      	str	r1, [r2, #0]
 8002c1c:	bf18      	it	ne
 8002c1e:	b21b      	sxthne	r3, r3
 8002c20:	e7cf      	b.n	8002bc2 <_printf_i+0x52>
 8002c22:	6813      	ldr	r3, [r2, #0]
 8002c24:	6825      	ldr	r5, [r4, #0]
 8002c26:	1d18      	adds	r0, r3, #4
 8002c28:	6010      	str	r0, [r2, #0]
 8002c2a:	0628      	lsls	r0, r5, #24
 8002c2c:	d501      	bpl.n	8002c32 <_printf_i+0xc2>
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	e002      	b.n	8002c38 <_printf_i+0xc8>
 8002c32:	0668      	lsls	r0, r5, #25
 8002c34:	d5fb      	bpl.n	8002c2e <_printf_i+0xbe>
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	296f      	cmp	r1, #111	; 0x6f
 8002c3a:	bf14      	ite	ne
 8002c3c:	220a      	movne	r2, #10
 8002c3e:	2208      	moveq	r2, #8
 8002c40:	4852      	ldr	r0, [pc, #328]	; (8002d8c <_printf_i+0x21c>)
 8002c42:	2100      	movs	r1, #0
 8002c44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c48:	6865      	ldr	r5, [r4, #4]
 8002c4a:	2d00      	cmp	r5, #0
 8002c4c:	60a5      	str	r5, [r4, #8]
 8002c4e:	f2c0 8095 	blt.w	8002d7c <_printf_i+0x20c>
 8002c52:	6821      	ldr	r1, [r4, #0]
 8002c54:	f021 0104 	bic.w	r1, r1, #4
 8002c58:	6021      	str	r1, [r4, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d13d      	bne.n	8002cda <_printf_i+0x16a>
 8002c5e:	2d00      	cmp	r5, #0
 8002c60:	f040 808e 	bne.w	8002d80 <_printf_i+0x210>
 8002c64:	4665      	mov	r5, ip
 8002c66:	2a08      	cmp	r2, #8
 8002c68:	d10b      	bne.n	8002c82 <_printf_i+0x112>
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	07db      	lsls	r3, r3, #31
 8002c6e:	d508      	bpl.n	8002c82 <_printf_i+0x112>
 8002c70:	6923      	ldr	r3, [r4, #16]
 8002c72:	6862      	ldr	r2, [r4, #4]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	bfde      	ittt	le
 8002c78:	2330      	movle	r3, #48	; 0x30
 8002c7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c7e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002c82:	ebac 0305 	sub.w	r3, ip, r5
 8002c86:	6123      	str	r3, [r4, #16]
 8002c88:	f8cd 8000 	str.w	r8, [sp]
 8002c8c:	463b      	mov	r3, r7
 8002c8e:	aa03      	add	r2, sp, #12
 8002c90:	4621      	mov	r1, r4
 8002c92:	4630      	mov	r0, r6
 8002c94:	f7ff fef6 	bl	8002a84 <_printf_common>
 8002c98:	3001      	adds	r0, #1
 8002c9a:	d14d      	bne.n	8002d38 <_printf_i+0x1c8>
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ca0:	b005      	add	sp, #20
 8002ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ca6:	4839      	ldr	r0, [pc, #228]	; (8002d8c <_printf_i+0x21c>)
 8002ca8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002cac:	6813      	ldr	r3, [r2, #0]
 8002cae:	6821      	ldr	r1, [r4, #0]
 8002cb0:	1d1d      	adds	r5, r3, #4
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6015      	str	r5, [r2, #0]
 8002cb6:	060a      	lsls	r2, r1, #24
 8002cb8:	d50b      	bpl.n	8002cd2 <_printf_i+0x162>
 8002cba:	07ca      	lsls	r2, r1, #31
 8002cbc:	bf44      	itt	mi
 8002cbe:	f041 0120 	orrmi.w	r1, r1, #32
 8002cc2:	6021      	strmi	r1, [r4, #0]
 8002cc4:	b91b      	cbnz	r3, 8002cce <_printf_i+0x15e>
 8002cc6:	6822      	ldr	r2, [r4, #0]
 8002cc8:	f022 0220 	bic.w	r2, r2, #32
 8002ccc:	6022      	str	r2, [r4, #0]
 8002cce:	2210      	movs	r2, #16
 8002cd0:	e7b7      	b.n	8002c42 <_printf_i+0xd2>
 8002cd2:	064d      	lsls	r5, r1, #25
 8002cd4:	bf48      	it	mi
 8002cd6:	b29b      	uxthmi	r3, r3
 8002cd8:	e7ef      	b.n	8002cba <_printf_i+0x14a>
 8002cda:	4665      	mov	r5, ip
 8002cdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ce0:	fb02 3311 	mls	r3, r2, r1, r3
 8002ce4:	5cc3      	ldrb	r3, [r0, r3]
 8002ce6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002cea:	460b      	mov	r3, r1
 8002cec:	2900      	cmp	r1, #0
 8002cee:	d1f5      	bne.n	8002cdc <_printf_i+0x16c>
 8002cf0:	e7b9      	b.n	8002c66 <_printf_i+0xf6>
 8002cf2:	6813      	ldr	r3, [r2, #0]
 8002cf4:	6825      	ldr	r5, [r4, #0]
 8002cf6:	1d18      	adds	r0, r3, #4
 8002cf8:	6961      	ldr	r1, [r4, #20]
 8002cfa:	6010      	str	r0, [r2, #0]
 8002cfc:	0628      	lsls	r0, r5, #24
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	d501      	bpl.n	8002d06 <_printf_i+0x196>
 8002d02:	6019      	str	r1, [r3, #0]
 8002d04:	e002      	b.n	8002d0c <_printf_i+0x19c>
 8002d06:	066a      	lsls	r2, r5, #25
 8002d08:	d5fb      	bpl.n	8002d02 <_printf_i+0x192>
 8002d0a:	8019      	strh	r1, [r3, #0]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	4665      	mov	r5, ip
 8002d10:	6123      	str	r3, [r4, #16]
 8002d12:	e7b9      	b.n	8002c88 <_printf_i+0x118>
 8002d14:	6813      	ldr	r3, [r2, #0]
 8002d16:	1d19      	adds	r1, r3, #4
 8002d18:	6011      	str	r1, [r2, #0]
 8002d1a:	681d      	ldr	r5, [r3, #0]
 8002d1c:	6862      	ldr	r2, [r4, #4]
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4628      	mov	r0, r5
 8002d22:	f000 fac9 	bl	80032b8 <memchr>
 8002d26:	b108      	cbz	r0, 8002d2c <_printf_i+0x1bc>
 8002d28:	1b40      	subs	r0, r0, r5
 8002d2a:	6060      	str	r0, [r4, #4]
 8002d2c:	6863      	ldr	r3, [r4, #4]
 8002d2e:	6123      	str	r3, [r4, #16]
 8002d30:	2300      	movs	r3, #0
 8002d32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d36:	e7a7      	b.n	8002c88 <_printf_i+0x118>
 8002d38:	6923      	ldr	r3, [r4, #16]
 8002d3a:	462a      	mov	r2, r5
 8002d3c:	4639      	mov	r1, r7
 8002d3e:	4630      	mov	r0, r6
 8002d40:	47c0      	blx	r8
 8002d42:	3001      	adds	r0, #1
 8002d44:	d0aa      	beq.n	8002c9c <_printf_i+0x12c>
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	079b      	lsls	r3, r3, #30
 8002d4a:	d413      	bmi.n	8002d74 <_printf_i+0x204>
 8002d4c:	68e0      	ldr	r0, [r4, #12]
 8002d4e:	9b03      	ldr	r3, [sp, #12]
 8002d50:	4298      	cmp	r0, r3
 8002d52:	bfb8      	it	lt
 8002d54:	4618      	movlt	r0, r3
 8002d56:	e7a3      	b.n	8002ca0 <_printf_i+0x130>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	464a      	mov	r2, r9
 8002d5c:	4639      	mov	r1, r7
 8002d5e:	4630      	mov	r0, r6
 8002d60:	47c0      	blx	r8
 8002d62:	3001      	adds	r0, #1
 8002d64:	d09a      	beq.n	8002c9c <_printf_i+0x12c>
 8002d66:	3501      	adds	r5, #1
 8002d68:	68e3      	ldr	r3, [r4, #12]
 8002d6a:	9a03      	ldr	r2, [sp, #12]
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	42ab      	cmp	r3, r5
 8002d70:	dcf2      	bgt.n	8002d58 <_printf_i+0x1e8>
 8002d72:	e7eb      	b.n	8002d4c <_printf_i+0x1dc>
 8002d74:	2500      	movs	r5, #0
 8002d76:	f104 0919 	add.w	r9, r4, #25
 8002d7a:	e7f5      	b.n	8002d68 <_printf_i+0x1f8>
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1ac      	bne.n	8002cda <_printf_i+0x16a>
 8002d80:	7803      	ldrb	r3, [r0, #0]
 8002d82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d8a:	e76c      	b.n	8002c66 <_printf_i+0xf6>
 8002d8c:	08003491 	.word	0x08003491
 8002d90:	080034a2 	.word	0x080034a2

08002d94 <_putc_r>:
 8002d94:	b570      	push	{r4, r5, r6, lr}
 8002d96:	460d      	mov	r5, r1
 8002d98:	4614      	mov	r4, r2
 8002d9a:	4606      	mov	r6, r0
 8002d9c:	b118      	cbz	r0, 8002da6 <_putc_r+0x12>
 8002d9e:	6983      	ldr	r3, [r0, #24]
 8002da0:	b90b      	cbnz	r3, 8002da6 <_putc_r+0x12>
 8002da2:	f7ff fc4d 	bl	8002640 <__sinit>
 8002da6:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <_putc_r+0x60>)
 8002da8:	429c      	cmp	r4, r3
 8002daa:	d112      	bne.n	8002dd2 <_putc_r+0x3e>
 8002dac:	6874      	ldr	r4, [r6, #4]
 8002dae:	68a3      	ldr	r3, [r4, #8]
 8002db0:	3b01      	subs	r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	60a3      	str	r3, [r4, #8]
 8002db6:	da16      	bge.n	8002de6 <_putc_r+0x52>
 8002db8:	69a2      	ldr	r2, [r4, #24]
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	db02      	blt.n	8002dc4 <_putc_r+0x30>
 8002dbe:	b2eb      	uxtb	r3, r5
 8002dc0:	2b0a      	cmp	r3, #10
 8002dc2:	d110      	bne.n	8002de6 <_putc_r+0x52>
 8002dc4:	4622      	mov	r2, r4
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	4630      	mov	r0, r6
 8002dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002dce:	f000 b86b 	b.w	8002ea8 <__swbuf_r>
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <_putc_r+0x64>)
 8002dd4:	429c      	cmp	r4, r3
 8002dd6:	d101      	bne.n	8002ddc <_putc_r+0x48>
 8002dd8:	68b4      	ldr	r4, [r6, #8]
 8002dda:	e7e8      	b.n	8002dae <_putc_r+0x1a>
 8002ddc:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <_putc_r+0x68>)
 8002dde:	429c      	cmp	r4, r3
 8002de0:	bf08      	it	eq
 8002de2:	68f4      	ldreq	r4, [r6, #12]
 8002de4:	e7e3      	b.n	8002dae <_putc_r+0x1a>
 8002de6:	6823      	ldr	r3, [r4, #0]
 8002de8:	b2e8      	uxtb	r0, r5
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	6022      	str	r2, [r4, #0]
 8002dee:	701d      	strb	r5, [r3, #0]
 8002df0:	bd70      	pop	{r4, r5, r6, pc}
 8002df2:	bf00      	nop
 8002df4:	08003440 	.word	0x08003440
 8002df8:	08003460 	.word	0x08003460
 8002dfc:	08003420 	.word	0x08003420

08002e00 <_sbrk_r>:
 8002e00:	b538      	push	{r3, r4, r5, lr}
 8002e02:	2300      	movs	r3, #0
 8002e04:	4c05      	ldr	r4, [pc, #20]	; (8002e1c <_sbrk_r+0x1c>)
 8002e06:	4605      	mov	r5, r0
 8002e08:	4608      	mov	r0, r1
 8002e0a:	6023      	str	r3, [r4, #0]
 8002e0c:	f7ff fae8 	bl	80023e0 <_sbrk>
 8002e10:	1c43      	adds	r3, r0, #1
 8002e12:	d102      	bne.n	8002e1a <_sbrk_r+0x1a>
 8002e14:	6823      	ldr	r3, [r4, #0]
 8002e16:	b103      	cbz	r3, 8002e1a <_sbrk_r+0x1a>
 8002e18:	602b      	str	r3, [r5, #0]
 8002e1a:	bd38      	pop	{r3, r4, r5, pc}
 8002e1c:	20000134 	.word	0x20000134

08002e20 <__sread>:
 8002e20:	b510      	push	{r4, lr}
 8002e22:	460c      	mov	r4, r1
 8002e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e28:	f000 faa2 	bl	8003370 <_read_r>
 8002e2c:	2800      	cmp	r0, #0
 8002e2e:	bfab      	itete	ge
 8002e30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e32:	89a3      	ldrhlt	r3, [r4, #12]
 8002e34:	181b      	addge	r3, r3, r0
 8002e36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002e3a:	bfac      	ite	ge
 8002e3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002e3e:	81a3      	strhlt	r3, [r4, #12]
 8002e40:	bd10      	pop	{r4, pc}

08002e42 <__swrite>:
 8002e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e46:	461f      	mov	r7, r3
 8002e48:	898b      	ldrh	r3, [r1, #12]
 8002e4a:	4605      	mov	r5, r0
 8002e4c:	05db      	lsls	r3, r3, #23
 8002e4e:	460c      	mov	r4, r1
 8002e50:	4616      	mov	r6, r2
 8002e52:	d505      	bpl.n	8002e60 <__swrite+0x1e>
 8002e54:	2302      	movs	r3, #2
 8002e56:	2200      	movs	r2, #0
 8002e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e5c:	f000 f9b6 	bl	80031cc <_lseek_r>
 8002e60:	89a3      	ldrh	r3, [r4, #12]
 8002e62:	4632      	mov	r2, r6
 8002e64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e68:	81a3      	strh	r3, [r4, #12]
 8002e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e6e:	463b      	mov	r3, r7
 8002e70:	4628      	mov	r0, r5
 8002e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e76:	f000 b869 	b.w	8002f4c <_write_r>

08002e7a <__sseek>:
 8002e7a:	b510      	push	{r4, lr}
 8002e7c:	460c      	mov	r4, r1
 8002e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e82:	f000 f9a3 	bl	80031cc <_lseek_r>
 8002e86:	1c43      	adds	r3, r0, #1
 8002e88:	89a3      	ldrh	r3, [r4, #12]
 8002e8a:	bf15      	itete	ne
 8002e8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002e8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002e92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002e96:	81a3      	strheq	r3, [r4, #12]
 8002e98:	bf18      	it	ne
 8002e9a:	81a3      	strhne	r3, [r4, #12]
 8002e9c:	bd10      	pop	{r4, pc}

08002e9e <__sclose>:
 8002e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ea2:	f000 b8d3 	b.w	800304c <_close_r>
	...

08002ea8 <__swbuf_r>:
 8002ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eaa:	460e      	mov	r6, r1
 8002eac:	4614      	mov	r4, r2
 8002eae:	4605      	mov	r5, r0
 8002eb0:	b118      	cbz	r0, 8002eba <__swbuf_r+0x12>
 8002eb2:	6983      	ldr	r3, [r0, #24]
 8002eb4:	b90b      	cbnz	r3, 8002eba <__swbuf_r+0x12>
 8002eb6:	f7ff fbc3 	bl	8002640 <__sinit>
 8002eba:	4b21      	ldr	r3, [pc, #132]	; (8002f40 <__swbuf_r+0x98>)
 8002ebc:	429c      	cmp	r4, r3
 8002ebe:	d12a      	bne.n	8002f16 <__swbuf_r+0x6e>
 8002ec0:	686c      	ldr	r4, [r5, #4]
 8002ec2:	69a3      	ldr	r3, [r4, #24]
 8002ec4:	60a3      	str	r3, [r4, #8]
 8002ec6:	89a3      	ldrh	r3, [r4, #12]
 8002ec8:	071a      	lsls	r2, r3, #28
 8002eca:	d52e      	bpl.n	8002f2a <__swbuf_r+0x82>
 8002ecc:	6923      	ldr	r3, [r4, #16]
 8002ece:	b363      	cbz	r3, 8002f2a <__swbuf_r+0x82>
 8002ed0:	6923      	ldr	r3, [r4, #16]
 8002ed2:	6820      	ldr	r0, [r4, #0]
 8002ed4:	b2f6      	uxtb	r6, r6
 8002ed6:	1ac0      	subs	r0, r0, r3
 8002ed8:	6963      	ldr	r3, [r4, #20]
 8002eda:	4637      	mov	r7, r6
 8002edc:	4283      	cmp	r3, r0
 8002ede:	dc04      	bgt.n	8002eea <__swbuf_r+0x42>
 8002ee0:	4621      	mov	r1, r4
 8002ee2:	4628      	mov	r0, r5
 8002ee4:	f000 f948 	bl	8003178 <_fflush_r>
 8002ee8:	bb28      	cbnz	r0, 8002f36 <__swbuf_r+0x8e>
 8002eea:	68a3      	ldr	r3, [r4, #8]
 8002eec:	3001      	adds	r0, #1
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	60a3      	str	r3, [r4, #8]
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	6022      	str	r2, [r4, #0]
 8002ef8:	701e      	strb	r6, [r3, #0]
 8002efa:	6963      	ldr	r3, [r4, #20]
 8002efc:	4283      	cmp	r3, r0
 8002efe:	d004      	beq.n	8002f0a <__swbuf_r+0x62>
 8002f00:	89a3      	ldrh	r3, [r4, #12]
 8002f02:	07db      	lsls	r3, r3, #31
 8002f04:	d519      	bpl.n	8002f3a <__swbuf_r+0x92>
 8002f06:	2e0a      	cmp	r6, #10
 8002f08:	d117      	bne.n	8002f3a <__swbuf_r+0x92>
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	4628      	mov	r0, r5
 8002f0e:	f000 f933 	bl	8003178 <_fflush_r>
 8002f12:	b190      	cbz	r0, 8002f3a <__swbuf_r+0x92>
 8002f14:	e00f      	b.n	8002f36 <__swbuf_r+0x8e>
 8002f16:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <__swbuf_r+0x9c>)
 8002f18:	429c      	cmp	r4, r3
 8002f1a:	d101      	bne.n	8002f20 <__swbuf_r+0x78>
 8002f1c:	68ac      	ldr	r4, [r5, #8]
 8002f1e:	e7d0      	b.n	8002ec2 <__swbuf_r+0x1a>
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <__swbuf_r+0xa0>)
 8002f22:	429c      	cmp	r4, r3
 8002f24:	bf08      	it	eq
 8002f26:	68ec      	ldreq	r4, [r5, #12]
 8002f28:	e7cb      	b.n	8002ec2 <__swbuf_r+0x1a>
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	4628      	mov	r0, r5
 8002f2e:	f000 f81f 	bl	8002f70 <__swsetup_r>
 8002f32:	2800      	cmp	r0, #0
 8002f34:	d0cc      	beq.n	8002ed0 <__swbuf_r+0x28>
 8002f36:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002f3a:	4638      	mov	r0, r7
 8002f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	08003440 	.word	0x08003440
 8002f44:	08003460 	.word	0x08003460
 8002f48:	08003420 	.word	0x08003420

08002f4c <_write_r>:
 8002f4c:	b538      	push	{r3, r4, r5, lr}
 8002f4e:	4605      	mov	r5, r0
 8002f50:	4608      	mov	r0, r1
 8002f52:	4611      	mov	r1, r2
 8002f54:	2200      	movs	r2, #0
 8002f56:	4c05      	ldr	r4, [pc, #20]	; (8002f6c <_write_r+0x20>)
 8002f58:	6022      	str	r2, [r4, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f7ff f9f3 	bl	8002346 <_write>
 8002f60:	1c43      	adds	r3, r0, #1
 8002f62:	d102      	bne.n	8002f6a <_write_r+0x1e>
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	b103      	cbz	r3, 8002f6a <_write_r+0x1e>
 8002f68:	602b      	str	r3, [r5, #0]
 8002f6a:	bd38      	pop	{r3, r4, r5, pc}
 8002f6c:	20000134 	.word	0x20000134

08002f70 <__swsetup_r>:
 8002f70:	4b32      	ldr	r3, [pc, #200]	; (800303c <__swsetup_r+0xcc>)
 8002f72:	b570      	push	{r4, r5, r6, lr}
 8002f74:	681d      	ldr	r5, [r3, #0]
 8002f76:	4606      	mov	r6, r0
 8002f78:	460c      	mov	r4, r1
 8002f7a:	b125      	cbz	r5, 8002f86 <__swsetup_r+0x16>
 8002f7c:	69ab      	ldr	r3, [r5, #24]
 8002f7e:	b913      	cbnz	r3, 8002f86 <__swsetup_r+0x16>
 8002f80:	4628      	mov	r0, r5
 8002f82:	f7ff fb5d 	bl	8002640 <__sinit>
 8002f86:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <__swsetup_r+0xd0>)
 8002f88:	429c      	cmp	r4, r3
 8002f8a:	d10f      	bne.n	8002fac <__swsetup_r+0x3c>
 8002f8c:	686c      	ldr	r4, [r5, #4]
 8002f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	0715      	lsls	r5, r2, #28
 8002f96:	d42c      	bmi.n	8002ff2 <__swsetup_r+0x82>
 8002f98:	06d0      	lsls	r0, r2, #27
 8002f9a:	d411      	bmi.n	8002fc0 <__swsetup_r+0x50>
 8002f9c:	2209      	movs	r2, #9
 8002f9e:	6032      	str	r2, [r6, #0]
 8002fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fa4:	81a3      	strh	r3, [r4, #12]
 8002fa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002faa:	e03e      	b.n	800302a <__swsetup_r+0xba>
 8002fac:	4b25      	ldr	r3, [pc, #148]	; (8003044 <__swsetup_r+0xd4>)
 8002fae:	429c      	cmp	r4, r3
 8002fb0:	d101      	bne.n	8002fb6 <__swsetup_r+0x46>
 8002fb2:	68ac      	ldr	r4, [r5, #8]
 8002fb4:	e7eb      	b.n	8002f8e <__swsetup_r+0x1e>
 8002fb6:	4b24      	ldr	r3, [pc, #144]	; (8003048 <__swsetup_r+0xd8>)
 8002fb8:	429c      	cmp	r4, r3
 8002fba:	bf08      	it	eq
 8002fbc:	68ec      	ldreq	r4, [r5, #12]
 8002fbe:	e7e6      	b.n	8002f8e <__swsetup_r+0x1e>
 8002fc0:	0751      	lsls	r1, r2, #29
 8002fc2:	d512      	bpl.n	8002fea <__swsetup_r+0x7a>
 8002fc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fc6:	b141      	cbz	r1, 8002fda <__swsetup_r+0x6a>
 8002fc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fcc:	4299      	cmp	r1, r3
 8002fce:	d002      	beq.n	8002fd6 <__swsetup_r+0x66>
 8002fd0:	4630      	mov	r0, r6
 8002fd2:	f000 f981 	bl	80032d8 <_free_r>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	6363      	str	r3, [r4, #52]	; 0x34
 8002fda:	89a3      	ldrh	r3, [r4, #12]
 8002fdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fe0:	81a3      	strh	r3, [r4, #12]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	6063      	str	r3, [r4, #4]
 8002fe6:	6923      	ldr	r3, [r4, #16]
 8002fe8:	6023      	str	r3, [r4, #0]
 8002fea:	89a3      	ldrh	r3, [r4, #12]
 8002fec:	f043 0308 	orr.w	r3, r3, #8
 8002ff0:	81a3      	strh	r3, [r4, #12]
 8002ff2:	6923      	ldr	r3, [r4, #16]
 8002ff4:	b94b      	cbnz	r3, 800300a <__swsetup_r+0x9a>
 8002ff6:	89a3      	ldrh	r3, [r4, #12]
 8002ff8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003000:	d003      	beq.n	800300a <__swsetup_r+0x9a>
 8003002:	4621      	mov	r1, r4
 8003004:	4630      	mov	r0, r6
 8003006:	f000 f917 	bl	8003238 <__smakebuf_r>
 800300a:	89a2      	ldrh	r2, [r4, #12]
 800300c:	f012 0301 	ands.w	r3, r2, #1
 8003010:	d00c      	beq.n	800302c <__swsetup_r+0xbc>
 8003012:	2300      	movs	r3, #0
 8003014:	60a3      	str	r3, [r4, #8]
 8003016:	6963      	ldr	r3, [r4, #20]
 8003018:	425b      	negs	r3, r3
 800301a:	61a3      	str	r3, [r4, #24]
 800301c:	6923      	ldr	r3, [r4, #16]
 800301e:	b953      	cbnz	r3, 8003036 <__swsetup_r+0xc6>
 8003020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003024:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003028:	d1ba      	bne.n	8002fa0 <__swsetup_r+0x30>
 800302a:	bd70      	pop	{r4, r5, r6, pc}
 800302c:	0792      	lsls	r2, r2, #30
 800302e:	bf58      	it	pl
 8003030:	6963      	ldrpl	r3, [r4, #20]
 8003032:	60a3      	str	r3, [r4, #8]
 8003034:	e7f2      	b.n	800301c <__swsetup_r+0xac>
 8003036:	2000      	movs	r0, #0
 8003038:	e7f7      	b.n	800302a <__swsetup_r+0xba>
 800303a:	bf00      	nop
 800303c:	2000000c 	.word	0x2000000c
 8003040:	08003440 	.word	0x08003440
 8003044:	08003460 	.word	0x08003460
 8003048:	08003420 	.word	0x08003420

0800304c <_close_r>:
 800304c:	b538      	push	{r3, r4, r5, lr}
 800304e:	2300      	movs	r3, #0
 8003050:	4c05      	ldr	r4, [pc, #20]	; (8003068 <_close_r+0x1c>)
 8003052:	4605      	mov	r5, r0
 8003054:	4608      	mov	r0, r1
 8003056:	6023      	str	r3, [r4, #0]
 8003058:	f7ff f991 	bl	800237e <_close>
 800305c:	1c43      	adds	r3, r0, #1
 800305e:	d102      	bne.n	8003066 <_close_r+0x1a>
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	b103      	cbz	r3, 8003066 <_close_r+0x1a>
 8003064:	602b      	str	r3, [r5, #0]
 8003066:	bd38      	pop	{r3, r4, r5, pc}
 8003068:	20000134 	.word	0x20000134

0800306c <__sflush_r>:
 800306c:	898a      	ldrh	r2, [r1, #12]
 800306e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003072:	4605      	mov	r5, r0
 8003074:	0710      	lsls	r0, r2, #28
 8003076:	460c      	mov	r4, r1
 8003078:	d458      	bmi.n	800312c <__sflush_r+0xc0>
 800307a:	684b      	ldr	r3, [r1, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	dc05      	bgt.n	800308c <__sflush_r+0x20>
 8003080:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	dc02      	bgt.n	800308c <__sflush_r+0x20>
 8003086:	2000      	movs	r0, #0
 8003088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800308c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800308e:	2e00      	cmp	r6, #0
 8003090:	d0f9      	beq.n	8003086 <__sflush_r+0x1a>
 8003092:	2300      	movs	r3, #0
 8003094:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003098:	682f      	ldr	r7, [r5, #0]
 800309a:	6a21      	ldr	r1, [r4, #32]
 800309c:	602b      	str	r3, [r5, #0]
 800309e:	d032      	beq.n	8003106 <__sflush_r+0x9a>
 80030a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030a2:	89a3      	ldrh	r3, [r4, #12]
 80030a4:	075a      	lsls	r2, r3, #29
 80030a6:	d505      	bpl.n	80030b4 <__sflush_r+0x48>
 80030a8:	6863      	ldr	r3, [r4, #4]
 80030aa:	1ac0      	subs	r0, r0, r3
 80030ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80030ae:	b10b      	cbz	r3, 80030b4 <__sflush_r+0x48>
 80030b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030b2:	1ac0      	subs	r0, r0, r3
 80030b4:	2300      	movs	r3, #0
 80030b6:	4602      	mov	r2, r0
 80030b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030ba:	6a21      	ldr	r1, [r4, #32]
 80030bc:	4628      	mov	r0, r5
 80030be:	47b0      	blx	r6
 80030c0:	1c43      	adds	r3, r0, #1
 80030c2:	89a3      	ldrh	r3, [r4, #12]
 80030c4:	d106      	bne.n	80030d4 <__sflush_r+0x68>
 80030c6:	6829      	ldr	r1, [r5, #0]
 80030c8:	291d      	cmp	r1, #29
 80030ca:	d848      	bhi.n	800315e <__sflush_r+0xf2>
 80030cc:	4a29      	ldr	r2, [pc, #164]	; (8003174 <__sflush_r+0x108>)
 80030ce:	40ca      	lsrs	r2, r1
 80030d0:	07d6      	lsls	r6, r2, #31
 80030d2:	d544      	bpl.n	800315e <__sflush_r+0xf2>
 80030d4:	2200      	movs	r2, #0
 80030d6:	6062      	str	r2, [r4, #4]
 80030d8:	6922      	ldr	r2, [r4, #16]
 80030da:	04d9      	lsls	r1, r3, #19
 80030dc:	6022      	str	r2, [r4, #0]
 80030de:	d504      	bpl.n	80030ea <__sflush_r+0x7e>
 80030e0:	1c42      	adds	r2, r0, #1
 80030e2:	d101      	bne.n	80030e8 <__sflush_r+0x7c>
 80030e4:	682b      	ldr	r3, [r5, #0]
 80030e6:	b903      	cbnz	r3, 80030ea <__sflush_r+0x7e>
 80030e8:	6560      	str	r0, [r4, #84]	; 0x54
 80030ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030ec:	602f      	str	r7, [r5, #0]
 80030ee:	2900      	cmp	r1, #0
 80030f0:	d0c9      	beq.n	8003086 <__sflush_r+0x1a>
 80030f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030f6:	4299      	cmp	r1, r3
 80030f8:	d002      	beq.n	8003100 <__sflush_r+0x94>
 80030fa:	4628      	mov	r0, r5
 80030fc:	f000 f8ec 	bl	80032d8 <_free_r>
 8003100:	2000      	movs	r0, #0
 8003102:	6360      	str	r0, [r4, #52]	; 0x34
 8003104:	e7c0      	b.n	8003088 <__sflush_r+0x1c>
 8003106:	2301      	movs	r3, #1
 8003108:	4628      	mov	r0, r5
 800310a:	47b0      	blx	r6
 800310c:	1c41      	adds	r1, r0, #1
 800310e:	d1c8      	bne.n	80030a2 <__sflush_r+0x36>
 8003110:	682b      	ldr	r3, [r5, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0c5      	beq.n	80030a2 <__sflush_r+0x36>
 8003116:	2b1d      	cmp	r3, #29
 8003118:	d001      	beq.n	800311e <__sflush_r+0xb2>
 800311a:	2b16      	cmp	r3, #22
 800311c:	d101      	bne.n	8003122 <__sflush_r+0xb6>
 800311e:	602f      	str	r7, [r5, #0]
 8003120:	e7b1      	b.n	8003086 <__sflush_r+0x1a>
 8003122:	89a3      	ldrh	r3, [r4, #12]
 8003124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003128:	81a3      	strh	r3, [r4, #12]
 800312a:	e7ad      	b.n	8003088 <__sflush_r+0x1c>
 800312c:	690f      	ldr	r7, [r1, #16]
 800312e:	2f00      	cmp	r7, #0
 8003130:	d0a9      	beq.n	8003086 <__sflush_r+0x1a>
 8003132:	0793      	lsls	r3, r2, #30
 8003134:	bf18      	it	ne
 8003136:	2300      	movne	r3, #0
 8003138:	680e      	ldr	r6, [r1, #0]
 800313a:	bf08      	it	eq
 800313c:	694b      	ldreq	r3, [r1, #20]
 800313e:	eba6 0807 	sub.w	r8, r6, r7
 8003142:	600f      	str	r7, [r1, #0]
 8003144:	608b      	str	r3, [r1, #8]
 8003146:	f1b8 0f00 	cmp.w	r8, #0
 800314a:	dd9c      	ble.n	8003086 <__sflush_r+0x1a>
 800314c:	4643      	mov	r3, r8
 800314e:	463a      	mov	r2, r7
 8003150:	6a21      	ldr	r1, [r4, #32]
 8003152:	4628      	mov	r0, r5
 8003154:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003156:	47b0      	blx	r6
 8003158:	2800      	cmp	r0, #0
 800315a:	dc06      	bgt.n	800316a <__sflush_r+0xfe>
 800315c:	89a3      	ldrh	r3, [r4, #12]
 800315e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003162:	81a3      	strh	r3, [r4, #12]
 8003164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003168:	e78e      	b.n	8003088 <__sflush_r+0x1c>
 800316a:	4407      	add	r7, r0
 800316c:	eba8 0800 	sub.w	r8, r8, r0
 8003170:	e7e9      	b.n	8003146 <__sflush_r+0xda>
 8003172:	bf00      	nop
 8003174:	20400001 	.word	0x20400001

08003178 <_fflush_r>:
 8003178:	b538      	push	{r3, r4, r5, lr}
 800317a:	690b      	ldr	r3, [r1, #16]
 800317c:	4605      	mov	r5, r0
 800317e:	460c      	mov	r4, r1
 8003180:	b1db      	cbz	r3, 80031ba <_fflush_r+0x42>
 8003182:	b118      	cbz	r0, 800318c <_fflush_r+0x14>
 8003184:	6983      	ldr	r3, [r0, #24]
 8003186:	b90b      	cbnz	r3, 800318c <_fflush_r+0x14>
 8003188:	f7ff fa5a 	bl	8002640 <__sinit>
 800318c:	4b0c      	ldr	r3, [pc, #48]	; (80031c0 <_fflush_r+0x48>)
 800318e:	429c      	cmp	r4, r3
 8003190:	d109      	bne.n	80031a6 <_fflush_r+0x2e>
 8003192:	686c      	ldr	r4, [r5, #4]
 8003194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003198:	b17b      	cbz	r3, 80031ba <_fflush_r+0x42>
 800319a:	4621      	mov	r1, r4
 800319c:	4628      	mov	r0, r5
 800319e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031a2:	f7ff bf63 	b.w	800306c <__sflush_r>
 80031a6:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <_fflush_r+0x4c>)
 80031a8:	429c      	cmp	r4, r3
 80031aa:	d101      	bne.n	80031b0 <_fflush_r+0x38>
 80031ac:	68ac      	ldr	r4, [r5, #8]
 80031ae:	e7f1      	b.n	8003194 <_fflush_r+0x1c>
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <_fflush_r+0x50>)
 80031b2:	429c      	cmp	r4, r3
 80031b4:	bf08      	it	eq
 80031b6:	68ec      	ldreq	r4, [r5, #12]
 80031b8:	e7ec      	b.n	8003194 <_fflush_r+0x1c>
 80031ba:	2000      	movs	r0, #0
 80031bc:	bd38      	pop	{r3, r4, r5, pc}
 80031be:	bf00      	nop
 80031c0:	08003440 	.word	0x08003440
 80031c4:	08003460 	.word	0x08003460
 80031c8:	08003420 	.word	0x08003420

080031cc <_lseek_r>:
 80031cc:	b538      	push	{r3, r4, r5, lr}
 80031ce:	4605      	mov	r5, r0
 80031d0:	4608      	mov	r0, r1
 80031d2:	4611      	mov	r1, r2
 80031d4:	2200      	movs	r2, #0
 80031d6:	4c05      	ldr	r4, [pc, #20]	; (80031ec <_lseek_r+0x20>)
 80031d8:	6022      	str	r2, [r4, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	f7ff f8f3 	bl	80023c6 <_lseek>
 80031e0:	1c43      	adds	r3, r0, #1
 80031e2:	d102      	bne.n	80031ea <_lseek_r+0x1e>
 80031e4:	6823      	ldr	r3, [r4, #0]
 80031e6:	b103      	cbz	r3, 80031ea <_lseek_r+0x1e>
 80031e8:	602b      	str	r3, [r5, #0]
 80031ea:	bd38      	pop	{r3, r4, r5, pc}
 80031ec:	20000134 	.word	0x20000134

080031f0 <__swhatbuf_r>:
 80031f0:	b570      	push	{r4, r5, r6, lr}
 80031f2:	460e      	mov	r6, r1
 80031f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031f8:	b096      	sub	sp, #88	; 0x58
 80031fa:	2900      	cmp	r1, #0
 80031fc:	4614      	mov	r4, r2
 80031fe:	461d      	mov	r5, r3
 8003200:	da07      	bge.n	8003212 <__swhatbuf_r+0x22>
 8003202:	2300      	movs	r3, #0
 8003204:	602b      	str	r3, [r5, #0]
 8003206:	89b3      	ldrh	r3, [r6, #12]
 8003208:	061a      	lsls	r2, r3, #24
 800320a:	d410      	bmi.n	800322e <__swhatbuf_r+0x3e>
 800320c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003210:	e00e      	b.n	8003230 <__swhatbuf_r+0x40>
 8003212:	466a      	mov	r2, sp
 8003214:	f000 f8be 	bl	8003394 <_fstat_r>
 8003218:	2800      	cmp	r0, #0
 800321a:	dbf2      	blt.n	8003202 <__swhatbuf_r+0x12>
 800321c:	9a01      	ldr	r2, [sp, #4]
 800321e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003222:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003226:	425a      	negs	r2, r3
 8003228:	415a      	adcs	r2, r3
 800322a:	602a      	str	r2, [r5, #0]
 800322c:	e7ee      	b.n	800320c <__swhatbuf_r+0x1c>
 800322e:	2340      	movs	r3, #64	; 0x40
 8003230:	2000      	movs	r0, #0
 8003232:	6023      	str	r3, [r4, #0]
 8003234:	b016      	add	sp, #88	; 0x58
 8003236:	bd70      	pop	{r4, r5, r6, pc}

08003238 <__smakebuf_r>:
 8003238:	898b      	ldrh	r3, [r1, #12]
 800323a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800323c:	079d      	lsls	r5, r3, #30
 800323e:	4606      	mov	r6, r0
 8003240:	460c      	mov	r4, r1
 8003242:	d507      	bpl.n	8003254 <__smakebuf_r+0x1c>
 8003244:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003248:	6023      	str	r3, [r4, #0]
 800324a:	6123      	str	r3, [r4, #16]
 800324c:	2301      	movs	r3, #1
 800324e:	6163      	str	r3, [r4, #20]
 8003250:	b002      	add	sp, #8
 8003252:	bd70      	pop	{r4, r5, r6, pc}
 8003254:	ab01      	add	r3, sp, #4
 8003256:	466a      	mov	r2, sp
 8003258:	f7ff ffca 	bl	80031f0 <__swhatbuf_r>
 800325c:	9900      	ldr	r1, [sp, #0]
 800325e:	4605      	mov	r5, r0
 8003260:	4630      	mov	r0, r6
 8003262:	f7ff fa77 	bl	8002754 <_malloc_r>
 8003266:	b948      	cbnz	r0, 800327c <__smakebuf_r+0x44>
 8003268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800326c:	059a      	lsls	r2, r3, #22
 800326e:	d4ef      	bmi.n	8003250 <__smakebuf_r+0x18>
 8003270:	f023 0303 	bic.w	r3, r3, #3
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	81a3      	strh	r3, [r4, #12]
 800327a:	e7e3      	b.n	8003244 <__smakebuf_r+0xc>
 800327c:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <__smakebuf_r+0x7c>)
 800327e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003280:	89a3      	ldrh	r3, [r4, #12]
 8003282:	6020      	str	r0, [r4, #0]
 8003284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003288:	81a3      	strh	r3, [r4, #12]
 800328a:	9b00      	ldr	r3, [sp, #0]
 800328c:	6120      	str	r0, [r4, #16]
 800328e:	6163      	str	r3, [r4, #20]
 8003290:	9b01      	ldr	r3, [sp, #4]
 8003292:	b15b      	cbz	r3, 80032ac <__smakebuf_r+0x74>
 8003294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003298:	4630      	mov	r0, r6
 800329a:	f000 f88d 	bl	80033b8 <_isatty_r>
 800329e:	b128      	cbz	r0, 80032ac <__smakebuf_r+0x74>
 80032a0:	89a3      	ldrh	r3, [r4, #12]
 80032a2:	f023 0303 	bic.w	r3, r3, #3
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	81a3      	strh	r3, [r4, #12]
 80032ac:	89a3      	ldrh	r3, [r4, #12]
 80032ae:	431d      	orrs	r5, r3
 80032b0:	81a5      	strh	r5, [r4, #12]
 80032b2:	e7cd      	b.n	8003250 <__smakebuf_r+0x18>
 80032b4:	08002609 	.word	0x08002609

080032b8 <memchr>:
 80032b8:	b510      	push	{r4, lr}
 80032ba:	b2c9      	uxtb	r1, r1
 80032bc:	4402      	add	r2, r0
 80032be:	4290      	cmp	r0, r2
 80032c0:	4603      	mov	r3, r0
 80032c2:	d101      	bne.n	80032c8 <memchr+0x10>
 80032c4:	2300      	movs	r3, #0
 80032c6:	e003      	b.n	80032d0 <memchr+0x18>
 80032c8:	781c      	ldrb	r4, [r3, #0]
 80032ca:	3001      	adds	r0, #1
 80032cc:	428c      	cmp	r4, r1
 80032ce:	d1f6      	bne.n	80032be <memchr+0x6>
 80032d0:	4618      	mov	r0, r3
 80032d2:	bd10      	pop	{r4, pc}

080032d4 <__malloc_lock>:
 80032d4:	4770      	bx	lr

080032d6 <__malloc_unlock>:
 80032d6:	4770      	bx	lr

080032d8 <_free_r>:
 80032d8:	b538      	push	{r3, r4, r5, lr}
 80032da:	4605      	mov	r5, r0
 80032dc:	2900      	cmp	r1, #0
 80032de:	d043      	beq.n	8003368 <_free_r+0x90>
 80032e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032e4:	1f0c      	subs	r4, r1, #4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	bfb8      	it	lt
 80032ea:	18e4      	addlt	r4, r4, r3
 80032ec:	f7ff fff2 	bl	80032d4 <__malloc_lock>
 80032f0:	4a1e      	ldr	r2, [pc, #120]	; (800336c <_free_r+0x94>)
 80032f2:	6813      	ldr	r3, [r2, #0]
 80032f4:	4610      	mov	r0, r2
 80032f6:	b933      	cbnz	r3, 8003306 <_free_r+0x2e>
 80032f8:	6063      	str	r3, [r4, #4]
 80032fa:	6014      	str	r4, [r2, #0]
 80032fc:	4628      	mov	r0, r5
 80032fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003302:	f7ff bfe8 	b.w	80032d6 <__malloc_unlock>
 8003306:	42a3      	cmp	r3, r4
 8003308:	d90b      	bls.n	8003322 <_free_r+0x4a>
 800330a:	6821      	ldr	r1, [r4, #0]
 800330c:	1862      	adds	r2, r4, r1
 800330e:	4293      	cmp	r3, r2
 8003310:	bf01      	itttt	eq
 8003312:	681a      	ldreq	r2, [r3, #0]
 8003314:	685b      	ldreq	r3, [r3, #4]
 8003316:	1852      	addeq	r2, r2, r1
 8003318:	6022      	streq	r2, [r4, #0]
 800331a:	6063      	str	r3, [r4, #4]
 800331c:	6004      	str	r4, [r0, #0]
 800331e:	e7ed      	b.n	80032fc <_free_r+0x24>
 8003320:	4613      	mov	r3, r2
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	b10a      	cbz	r2, 800332a <_free_r+0x52>
 8003326:	42a2      	cmp	r2, r4
 8003328:	d9fa      	bls.n	8003320 <_free_r+0x48>
 800332a:	6819      	ldr	r1, [r3, #0]
 800332c:	1858      	adds	r0, r3, r1
 800332e:	42a0      	cmp	r0, r4
 8003330:	d10b      	bne.n	800334a <_free_r+0x72>
 8003332:	6820      	ldr	r0, [r4, #0]
 8003334:	4401      	add	r1, r0
 8003336:	1858      	adds	r0, r3, r1
 8003338:	4282      	cmp	r2, r0
 800333a:	6019      	str	r1, [r3, #0]
 800333c:	d1de      	bne.n	80032fc <_free_r+0x24>
 800333e:	6810      	ldr	r0, [r2, #0]
 8003340:	6852      	ldr	r2, [r2, #4]
 8003342:	4401      	add	r1, r0
 8003344:	6019      	str	r1, [r3, #0]
 8003346:	605a      	str	r2, [r3, #4]
 8003348:	e7d8      	b.n	80032fc <_free_r+0x24>
 800334a:	d902      	bls.n	8003352 <_free_r+0x7a>
 800334c:	230c      	movs	r3, #12
 800334e:	602b      	str	r3, [r5, #0]
 8003350:	e7d4      	b.n	80032fc <_free_r+0x24>
 8003352:	6820      	ldr	r0, [r4, #0]
 8003354:	1821      	adds	r1, r4, r0
 8003356:	428a      	cmp	r2, r1
 8003358:	bf01      	itttt	eq
 800335a:	6811      	ldreq	r1, [r2, #0]
 800335c:	6852      	ldreq	r2, [r2, #4]
 800335e:	1809      	addeq	r1, r1, r0
 8003360:	6021      	streq	r1, [r4, #0]
 8003362:	6062      	str	r2, [r4, #4]
 8003364:	605c      	str	r4, [r3, #4]
 8003366:	e7c9      	b.n	80032fc <_free_r+0x24>
 8003368:	bd38      	pop	{r3, r4, r5, pc}
 800336a:	bf00      	nop
 800336c:	20000094 	.word	0x20000094

08003370 <_read_r>:
 8003370:	b538      	push	{r3, r4, r5, lr}
 8003372:	4605      	mov	r5, r0
 8003374:	4608      	mov	r0, r1
 8003376:	4611      	mov	r1, r2
 8003378:	2200      	movs	r2, #0
 800337a:	4c05      	ldr	r4, [pc, #20]	; (8003390 <_read_r+0x20>)
 800337c:	6022      	str	r2, [r4, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	f7fe ffc4 	bl	800230c <_read>
 8003384:	1c43      	adds	r3, r0, #1
 8003386:	d102      	bne.n	800338e <_read_r+0x1e>
 8003388:	6823      	ldr	r3, [r4, #0]
 800338a:	b103      	cbz	r3, 800338e <_read_r+0x1e>
 800338c:	602b      	str	r3, [r5, #0]
 800338e:	bd38      	pop	{r3, r4, r5, pc}
 8003390:	20000134 	.word	0x20000134

08003394 <_fstat_r>:
 8003394:	b538      	push	{r3, r4, r5, lr}
 8003396:	2300      	movs	r3, #0
 8003398:	4c06      	ldr	r4, [pc, #24]	; (80033b4 <_fstat_r+0x20>)
 800339a:	4605      	mov	r5, r0
 800339c:	4608      	mov	r0, r1
 800339e:	4611      	mov	r1, r2
 80033a0:	6023      	str	r3, [r4, #0]
 80033a2:	f7fe fff7 	bl	8002394 <_fstat>
 80033a6:	1c43      	adds	r3, r0, #1
 80033a8:	d102      	bne.n	80033b0 <_fstat_r+0x1c>
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	b103      	cbz	r3, 80033b0 <_fstat_r+0x1c>
 80033ae:	602b      	str	r3, [r5, #0]
 80033b0:	bd38      	pop	{r3, r4, r5, pc}
 80033b2:	bf00      	nop
 80033b4:	20000134 	.word	0x20000134

080033b8 <_isatty_r>:
 80033b8:	b538      	push	{r3, r4, r5, lr}
 80033ba:	2300      	movs	r3, #0
 80033bc:	4c05      	ldr	r4, [pc, #20]	; (80033d4 <_isatty_r+0x1c>)
 80033be:	4605      	mov	r5, r0
 80033c0:	4608      	mov	r0, r1
 80033c2:	6023      	str	r3, [r4, #0]
 80033c4:	f7fe fff5 	bl	80023b2 <_isatty>
 80033c8:	1c43      	adds	r3, r0, #1
 80033ca:	d102      	bne.n	80033d2 <_isatty_r+0x1a>
 80033cc:	6823      	ldr	r3, [r4, #0]
 80033ce:	b103      	cbz	r3, 80033d2 <_isatty_r+0x1a>
 80033d0:	602b      	str	r3, [r5, #0]
 80033d2:	bd38      	pop	{r3, r4, r5, pc}
 80033d4:	20000134 	.word	0x20000134

080033d8 <_init>:
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	bf00      	nop
 80033dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033de:	bc08      	pop	{r3}
 80033e0:	469e      	mov	lr, r3
 80033e2:	4770      	bx	lr

080033e4 <_fini>:
 80033e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e6:	bf00      	nop
 80033e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ea:	bc08      	pop	{r3}
 80033ec:	469e      	mov	lr, r3
 80033ee:	4770      	bx	lr
